{"name": "get_latest_rate", "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0432\u0430\u043b\u044e\u0442\u044b. \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f base_currency \u0434\u043b\u044f \u0442\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u044b, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434, \u0438 target_currency \u0434\u043b\u044f \u0442\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438", "icon": null, "icon_bg_color": null, "gradient": null, "data": {"nodes": [{"data": {"id": "APIRequest-Dhufy", "node": {"base_classes": ["Data"], "beta": false, "category": "data", "conditional_paths": [], "custom_fields": {}, "description": "Make HTTP requests using URL or cURL commands.", "display_name": "API Request", "documentation": "https://docs.langflow.org/components-data#api-request", "edited": false, "field_order": ["url_input", "curl_input", "method", "mode", "query_params", "body", "headers", "timeout", "follow_redirects", "save_to_file", "include_httpx_metadata"], "frozen": false, "icon": "Globe", "key": "APIRequest", "last_updated": "2025-10-06T16:07:40.558Z", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "API Response", "group_outputs": false, "method": "make_api_request", "name": "data", "options": null, "required_inputs": null, "selected": "Data", "tool_mode": true, "types": ["Data"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.3462863569961052, "template": {"_type": "Component", "body": {"_input_type": "TableInput", "advanced": true, "display_name": "Body", "dynamic": false, "info": "The body to send with the request as a dictionary (for POST, PATCH, PUT).", "input_types": ["Data"], "is_list": true, "list_add_label": "Add More", "name": "body", "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "table_icon": "Table", "table_schema": {"columns": [{"default": "None", "description": "Parameter name", "disable_edit": false, "display_name": "Key", "edit_mode": "popover", "filterable": true, "formatter": "text", "hidden": false, "name": "key", "sortable": true, "type": "str"}, {"default": "None", "description": "Parameter value", "disable_edit": false, "display_name": "Value", "edit_mode": "popover", "filterable": true, "formatter": "text", "hidden": false, "name": "value", "sortable": true}]}, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "trigger_icon": "Table", "trigger_text": "Open table", "type": "table", "value": []}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "import json\nimport re\nimport tempfile\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom typing import Any\nfrom urllib.parse import parse_qsl, urlencode, urlparse, urlunparse\n\nimport aiofiles\nimport aiofiles.os as aiofiles_os\nimport httpx\nimport validators\n\nfrom langflow.base.curl.parse import parse_context\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import TabInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    IntInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TableInput,\n)\nfrom langflow.schema.data import Data\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.services.deps import get_settings_service\nfrom langflow.utils.component_utils import set_current_fields, set_field_advanced, set_field_display\n\n# Define fields for each mode\nMODE_FIELDS = {\n    \"URL\": [\n        \"url_input\",\n        \"method\",\n    ],\n    \"cURL\": [\"curl_input\"],\n}\n\n# Fields that should always be visible\nDEFAULT_FIELDS = [\"mode\"]\n\n\nclass APIRequestComponent(Component):\n    display_name = \"API Request\"\n    description = \"Make HTTP requests using URL or cURL commands.\"\n    documentation: str = \"https://docs.langflow.org/components-data#api-request\"\n    icon = \"Globe\"\n    name = \"APIRequest\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"url_input\",\n            display_name=\"URL\",\n            info=\"Enter the URL for the request.\",\n            advanced=False,\n            tool_mode=True,\n        ),\n        MultilineInput(\n            name=\"curl_input\",\n            display_name=\"cURL\",\n            info=(\n                \"Paste a curl command to populate the fields. \"\n                \"This will fill in the dictionary fields for headers and body.\"\n            ),\n            real_time_refresh=True,\n            tool_mode=True,\n            advanced=True,\n            show=False,\n        ),\n        DropdownInput(\n            name=\"method\",\n            display_name=\"Method\",\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\n            value=\"GET\",\n            info=\"The HTTP method to use.\",\n            real_time_refresh=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"URL\", \"cURL\"],\n            value=\"URL\",\n            info=\"Enable cURL mode to populate fields from a cURL command.\",\n            real_time_refresh=True,\n        ),\n        DataInput(\n            name=\"query_params\",\n            display_name=\"Query Parameters\",\n            info=\"The query parameters to append to the URL.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"body\",\n            display_name=\"Body\",\n            info=\"The body to send with the request as a dictionary (for POST, PATCH, PUT).\",\n            table_schema=[\n                {\n                    \"name\": \"key\",\n                    \"display_name\": \"Key\",\n                    \"type\": \"str\",\n                    \"description\": \"Parameter name\",\n                },\n                {\n                    \"name\": \"value\",\n                    \"display_name\": \"Value\",\n                    \"description\": \"Parameter value\",\n                },\n            ],\n            value=[],\n            input_types=[\"Data\"],\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        TableInput(\n            name=\"headers\",\n            display_name=\"Headers\",\n            info=\"The headers to send with the request\",\n            table_schema=[\n                {\n                    \"name\": \"key\",\n                    \"display_name\": \"Header\",\n                    \"type\": \"str\",\n                    \"description\": \"Header name\",\n                },\n                {\n                    \"name\": \"value\",\n                    \"display_name\": \"Value\",\n                    \"type\": \"str\",\n                    \"description\": \"Header value\",\n                },\n            ],\n            value=[{\"key\": \"User-Agent\", \"value\": get_settings_service().settings.user_agent}],\n            advanced=True,\n            input_types=[\"Data\"],\n            real_time_refresh=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            value=30,\n            info=\"The timeout to use for the request.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"follow_redirects\",\n            display_name=\"Follow Redirects\",\n            value=True,\n            info=\"Whether to follow http redirects.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"save_to_file\",\n            display_name=\"Save to File\",\n            value=False,\n            info=\"Save the API response to a temporary file\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_httpx_metadata\",\n            display_name=\"Include HTTPx Metadata\",\n            value=False,\n            info=(\n                \"Include properties such as headers, status_code, response_headers, \"\n                \"and redirection_history in the output.\"\n            ),\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"API Response\", name=\"data\", method=\"make_api_request\"),\n    ]\n\n    def _parse_json_value(self, value: Any) -> Any:\n        \"\"\"Parse a value that might be a JSON string.\"\"\"\n        if not isinstance(value, str):\n            return value\n\n        try:\n            parsed = json.loads(value)\n        except json.JSONDecodeError:\n            return value\n        else:\n            return parsed\n\n    def _process_body(self, body: Any) -> dict:\n        \"\"\"Process the body input into a valid dictionary.\"\"\"\n        if body is None:\n            return {}\n        if hasattr(body, \"data\"):\n            body = body.data\n        if isinstance(body, dict):\n            return self._process_dict_body(body)\n        if isinstance(body, str):\n            return self._process_string_body(body)\n        if isinstance(body, list):\n            return self._process_list_body(body)\n        return {}\n\n    def _process_dict_body(self, body: dict) -> dict:\n        \"\"\"Process dictionary body by parsing JSON values.\"\"\"\n        return {k: self._parse_json_value(v) for k, v in body.items()}\n\n    def _process_string_body(self, body: str) -> dict:\n        \"\"\"Process string body by attempting JSON parse.\"\"\"\n        try:\n            return self._process_body(json.loads(body))\n        except json.JSONDecodeError:\n            return {\"data\": body}\n\n    def _process_list_body(self, body: list) -> dict:\n        \"\"\"Process list body by converting to key-value dictionary.\"\"\"\n        processed_dict = {}\n        try:\n            for item in body:\n                # Unwrap Data objects\n                current_item = item\n                if hasattr(item, \"data\"):\n                    unwrapped_data = item.data\n                    # If the unwrapped data is a dict but not key-value format, use it directly\n                    if isinstance(unwrapped_data, dict) and not self._is_valid_key_value_item(unwrapped_data):\n                        return unwrapped_data\n                    current_item = unwrapped_data\n                if not self._is_valid_key_value_item(current_item):\n                    continue\n                key = current_item[\"key\"]\n                value = self._parse_json_value(current_item[\"value\"])\n                processed_dict[key] = value\n        except (KeyError, TypeError, ValueError) as e:\n            self.log(f\"Failed to process body list: {e}\")\n            return {}\n        return processed_dict\n\n    def _is_valid_key_value_item(self, item: Any) -> bool:\n        \"\"\"Check if an item is a valid key-value dictionary.\"\"\"\n        return isinstance(item, dict) and \"key\" in item and \"value\" in item\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        \"\"\"Parse a cURL command and update build configuration.\"\"\"\n        try:\n            parsed = parse_context(curl)\n\n            # Update basic configuration\n            url = parsed.url\n            # Normalize URL before setting it\n            url = self._normalize_url(url)\n\n            build_config[\"url_input\"][\"value\"] = url\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n\n            # Process headers\n            headers_list = [{\"key\": k, \"value\": v} for k, v in parsed.headers.items()]\n            build_config[\"headers\"][\"value\"] = headers_list\n\n            # Process body data\n            if not parsed.data:\n                build_config[\"body\"][\"value\"] = []\n            elif parsed.data:\n                try:\n                    json_data = json.loads(parsed.data)\n                    if isinstance(json_data, dict):\n                        body_list = [\n                            {\"key\": k, \"value\": json.dumps(v) if isinstance(v, dict | list) else str(v)}\n                            for k, v in json_data.items()\n                        ]\n                        build_config[\"body\"][\"value\"] = body_list\n                    else:\n                        build_config[\"body\"][\"value\"] = [{\"key\": \"data\", \"value\": json.dumps(json_data)}]\n                except json.JSONDecodeError:\n                    build_config[\"body\"][\"value\"] = [{\"key\": \"data\", \"value\": parsed.data}]\n\n        except Exception as exc:\n            msg = f\"Error parsing curl: {exc}\"\n            self.log(msg)\n            raise ValueError(msg) from exc\n\n        return build_config\n\n    def _normalize_url(self, url: str) -> str:\n        \"\"\"Normalize URL by adding https:// if no protocol is specified.\"\"\"\n        if not url or not isinstance(url, str):\n            msg = \"URL cannot be empty\"\n            raise ValueError(msg)\n\n        url = url.strip()\n        if url.startswith((\"http://\", \"https://\")):\n            return url\n        return f\"https://{url}\"\n\n    async def make_request(\n        self,\n        client: httpx.AsyncClient,\n        method: str,\n        url: str,\n        headers: dict | None = None,\n        body: Any = None,\n        timeout: int = 5,\n        *,\n        follow_redirects: bool = True,\n        save_to_file: bool = False,\n        include_httpx_metadata: bool = False,\n    ) -> Data:\n        method = method.upper()\n        if method not in {\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"}:\n            msg = f\"Unsupported method: {method}\"\n            raise ValueError(msg)\n\n        processed_body = self._process_body(body)\n        redirection_history = []\n\n        try:\n            # Prepare request parameters\n            request_params = {\n                \"method\": method,\n                \"url\": url,\n                \"headers\": headers,\n                \"json\": processed_body,\n                \"timeout\": timeout,\n                \"follow_redirects\": follow_redirects,\n            }\n            response = await client.request(**request_params)\n\n            redirection_history = [\n                {\n                    \"url\": redirect.headers.get(\"Location\", str(redirect.url)),\n                    \"status_code\": redirect.status_code,\n                }\n                for redirect in response.history\n            ]\n\n            is_binary, file_path = await self._response_info(response, with_file_path=save_to_file)\n            response_headers = self._headers_to_dict(response.headers)\n\n            # Base metadata\n            metadata = {\n                \"source\": url,\n                \"status_code\": response.status_code,\n                \"response_headers\": response_headers,\n            }\n\n            if redirection_history:\n                metadata[\"redirection_history\"] = redirection_history\n\n            if save_to_file:\n                mode = \"wb\" if is_binary else \"w\"\n                encoding = response.encoding if mode == \"w\" else None\n                if file_path:\n                    await aiofiles_os.makedirs(file_path.parent, exist_ok=True)\n                    if is_binary:\n                        async with aiofiles.open(file_path, \"wb\") as f:\n                            await f.write(response.content)\n                            await f.flush()\n                    else:\n                        async with aiofiles.open(file_path, \"w\", encoding=encoding) as f:\n                            await f.write(response.text)\n                            await f.flush()\n                    metadata[\"file_path\"] = str(file_path)\n\n                if include_httpx_metadata:\n                    metadata.update({\"headers\": headers})\n                return Data(data=metadata)\n\n            # Handle response content\n            if is_binary:\n                result = response.content\n            else:\n                try:\n                    result = response.json()\n                except json.JSONDecodeError:\n                    self.log(\"Failed to decode JSON response\")\n                    result = response.text.encode(\"utf-8\")\n\n            metadata[\"result\"] = result\n\n            if include_httpx_metadata:\n                metadata.update({\"headers\": headers})\n\n            return Data(data=metadata)\n        except (httpx.HTTPError, httpx.RequestError, httpx.TimeoutException) as exc:\n            self.log(f\"Error making request to {url}\")\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 500,\n                    \"error\": str(exc),\n                    **({\"redirection_history\": redirection_history} if redirection_history else {}),\n                },\n            )\n\n    def add_query_params(self, url: str, params: dict) -> str:\n        \"\"\"Add query parameters to URL efficiently.\"\"\"\n        if not params:\n            return url\n        url_parts = list(urlparse(url))\n        query = dict(parse_qsl(url_parts[4]))\n        query.update(params)\n        url_parts[4] = urlencode(query)\n        return urlunparse(url_parts)\n\n    def _headers_to_dict(self, headers: httpx.Headers) -> dict[str, str]:\n        \"\"\"Convert HTTP headers to a dictionary with lowercased keys.\"\"\"\n        return {k.lower(): v for k, v in headers.items()}\n\n    def _process_headers(self, headers: Any) -> dict:\n        \"\"\"Process the headers input into a valid dictionary.\"\"\"\n        if headers is None:\n            return {}\n        if isinstance(headers, dict):\n            return headers\n        if isinstance(headers, list):\n            return {item[\"key\"]: item[\"value\"] for item in headers if self._is_valid_key_value_item(item)}\n        return {}\n\n    async def make_api_request(self) -> Data:\n        \"\"\"Make HTTP request with optimized parameter handling.\"\"\"\n        method = self.method\n        url = self.url_input.strip() if isinstance(self.url_input, str) else \"\"\n        headers = self.headers or {}\n        body = self.body or {}\n        timeout = self.timeout\n        follow_redirects = self.follow_redirects\n        save_to_file = self.save_to_file\n        include_httpx_metadata = self.include_httpx_metadata\n\n        # if self.mode == \"cURL\" and self.curl_input:\n        #     self._build_config = self.parse_curl(self.curl_input, dotdict())\n        #     # After parsing curl, get the normalized URL\n        #     url = self._build_config[\"url_input\"][\"value\"]\n\n        # Normalize URL before validation\n        url = self._normalize_url(url)\n\n        # Validate URL\n        if not validators.url(url):\n            msg = f\"Invalid URL provided: {url}\"\n            raise ValueError(msg)\n\n        # Process query parameters\n        if isinstance(self.query_params, str):\n            query_params = dict(parse_qsl(self.query_params))\n        else:\n            query_params = self.query_params.data if self.query_params else {}\n\n        # Process headers and body\n        headers = self._process_headers(headers)\n        body = self._process_body(body)\n        url = self.add_query_params(url, query_params)\n\n        async with httpx.AsyncClient() as client:\n            result = await self.make_request(\n                client,\n                method,\n                url,\n                headers,\n                body,\n                timeout,\n                follow_redirects=follow_redirects,\n                save_to_file=save_to_file,\n                include_httpx_metadata=include_httpx_metadata,\n            )\n        self.status = result\n        return result\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        \"\"\"Update the build config based on the selected mode.\"\"\"\n        if field_name != \"mode\":\n            if field_name == \"curl_input\" and self.mode == \"cURL\" and self.curl_input:\n                return self.parse_curl(self.curl_input, build_config)\n            return build_config\n\n        # print(f\"Current mode: {field_value}\")\n        if field_value == \"cURL\":\n            set_field_display(build_config, \"curl_input\", value=True)\n            if build_config[\"curl_input\"][\"value\"]:\n                build_config = self.parse_curl(build_config[\"curl_input\"][\"value\"], build_config)\n        else:\n            set_field_display(build_config, \"curl_input\", value=False)\n\n        return set_current_fields(\n            build_config=build_config,\n            action_fields=MODE_FIELDS,\n            selected_action=field_value,\n            default_fields=DEFAULT_FIELDS,\n            func=set_field_advanced,\n            default_value=True,\n        )\n\n    async def _response_info(\n        self, response: httpx.Response, *, with_file_path: bool = False\n    ) -> tuple[bool, Path | None]:\n        \"\"\"Determine the file path and whether the response content is binary.\n\n        Args:\n            response (Response): The HTTP response object.\n            with_file_path (bool): Whether to save the response content to a file.\n\n        Returns:\n            Tuple[bool, Path | None]:\n                A tuple containing a boolean indicating if the content is binary and the full file path (if applicable).\n        \"\"\"\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        is_binary = \"application/octet-stream\" in content_type or \"application/binary\" in content_type\n\n        if not with_file_path:\n            return is_binary, None\n\n        component_temp_dir = Path(tempfile.gettempdir()) / self.__class__.__name__\n\n        # Create directory asynchronously\n        await aiofiles_os.makedirs(component_temp_dir, exist_ok=True)\n\n        filename = None\n        if \"Content-Disposition\" in response.headers:\n            content_disposition = response.headers[\"Content-Disposition\"]\n            filename_match = re.search(r'filename=\"(.+?)\"', content_disposition)\n            if filename_match:\n                extracted_filename = filename_match.group(1)\n                filename = extracted_filename\n\n        # Step 3: Infer file extension or use part of the request URL if no filename\n        if not filename:\n            # Extract the last segment of the URL path\n            url_path = urlparse(str(response.request.url) if response.request else \"\").path\n            base_name = Path(url_path).name  # Get the last segment of the path\n            if not base_name:  # If the path ends with a slash or is empty\n                base_name = \"response\"\n\n            # Infer file extension\n            content_type_to_extension = {\n                \"text/plain\": \".txt\",\n                \"application/json\": \".json\",\n                \"image/jpeg\": \".jpg\",\n                \"image/png\": \".png\",\n                \"application/octet-stream\": \".bin\",\n            }\n            extension = content_type_to_extension.get(content_type, \".bin\" if is_binary else \".txt\")\n            filename = f\"{base_name}{extension}\"\n\n        # Step 4: Define the full file path\n        file_path = component_temp_dir / filename\n\n        # Step 5: Check if file exists asynchronously and handle accordingly\n        try:\n            # Try to create the file exclusively (x mode) to check existence\n            async with aiofiles.open(file_path, \"x\") as _:\n                pass  # File created successfully, we can use this path\n        except FileExistsError:\n            # If file exists, append a timestamp to the filename\n            timestamp = datetime.now(timezone.utc).strftime(\"%Y%m%d%H%M%S%f\")\n            file_path = component_temp_dir / f\"{timestamp}-{filename}\"\n\n        return is_binary, file_path\n"}, "curl_input": {"_input_type": "MultilineInput", "advanced": true, "copy_field": false, "display_name": "cURL", "dynamic": false, "info": "Paste a curl command to populate the fields. This will fill in the dictionary fields for headers and body.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "curl_input", "placeholder": "", "real_time_refresh": true, "required": false, "show": false, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "follow_redirects": {"_input_type": "BoolInput", "advanced": true, "display_name": "Follow Redirects", "dynamic": false, "info": "Whether to follow http redirects.", "list": false, "list_add_label": "Add More", "name": "follow_redirects", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "headers": {"_input_type": "TableInput", "advanced": true, "display_name": "Headers", "dynamic": false, "info": "The headers to send with the request", "input_types": ["Data"], "is_list": true, "list_add_label": "Add More", "name": "headers", "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "table_icon": "Table", "table_schema": {"columns": [{"default": "None", "description": "Header name", "disable_edit": false, "display_name": "Header", "edit_mode": "popover", "filterable": true, "formatter": "text", "hidden": false, "name": "key", "sortable": true, "type": "str"}, {"default": "None", "description": "Header value", "disable_edit": false, "display_name": "Value", "edit_mode": "popover", "filterable": true, "formatter": "text", "hidden": false, "name": "value", "sortable": true, "type": "str"}]}, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "trigger_icon": "Table", "trigger_text": "Open table", "type": "table", "value": [{"key": "User-Agent", "value": "langflow"}]}, "include_httpx_metadata": {"_input_type": "BoolInput", "advanced": true, "display_name": "Include HTTPx Metadata", "dynamic": false, "info": "Include properties such as headers, status_code, response_headers, and redirection_history in the output.", "list": false, "list_add_label": "Add More", "name": "include_httpx_metadata", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": false}, "method": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Method", "dynamic": false, "external_options": {}, "info": "The HTTP method to use.", "name": "method", "options": ["GET", "POST", "PATCH", "PUT", "DELETE"], "options_metadata": [], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "GET"}, "mode": {"_input_type": "TabInput", "advanced": false, "display_name": "Mode", "dynamic": false, "info": "Enable cURL mode to populate fields from a cURL command.", "name": "mode", "options": ["URL", "cURL"], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "tab", "value": "URL"}, "query_params": {"_input_type": "DataInput", "advanced": true, "display_name": "Query Parameters", "dynamic": false, "info": "The query parameters to append to the URL.", "input_types": ["Data"], "list": false, "list_add_label": "Add More", "name": "query_params", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "other", "value": ""}, "save_to_file": {"_input_type": "BoolInput", "advanced": true, "display_name": "Save to File", "dynamic": false, "info": "Save the API response to a temporary file", "list": false, "list_add_label": "Add More", "name": "save_to_file", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": false}, "timeout": {"_input_type": "IntInput", "advanced": false, "display_name": "Timeout", "dynamic": false, "info": "The timeout to use for the request.", "list": false, "list_add_label": "Add More", "name": "timeout", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 10}, "url_input": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "URL", "dynamic": false, "info": "Enter the URL for the request.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "url_input", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "APIRequest"}, "dragging": false, "id": "APIRequest-Dhufy", "measured": {"height": 461, "width": 320}, "position": {"x": 173.51486806916972, "y": 373.17792840021775}, "selected": false, "type": "genericNode"}, {"data": {"id": "GetEnvVar-Zswa9", "node": {"base_classes": ["Message"], "beta": false, "category": "datastax", "conditional_paths": [], "custom_fields": {}, "description": "Gets the value of an environment variable from the system.", "display_name": "Get Environment Variable", "documentation": "", "edited": false, "field_order": ["env_var_name"], "frozen": false, "icon": "AstraDB", "key": "GetEnvVar", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Environment Variable Value", "group_outputs": false, "method": "process_inputs", "name": "env_var_value", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.15609486447437038, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "import os\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import StrInput\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass GetEnvVar(Component):\n    display_name = \"Get Environment Variable\"\n    description = \"Gets the value of an environment variable from the system.\"\n    icon = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"env_var_name\",\n            display_name=\"Environment Variable Name\",\n            info=\"Name of the environment variable to get\",\n        )\n    ]\n\n    outputs = [\n        Output(display_name=\"Environment Variable Value\", name=\"env_var_value\", method=\"process_inputs\"),\n    ]\n\n    def process_inputs(self) -> Message:\n        if self.env_var_name not in os.environ:\n            msg = f\"Environment variable {self.env_var_name} not set\"\n            raise ValueError(msg)\n        return Message(text=os.environ[self.env_var_name])\n"}, "env_var_name": {"_input_type": "StrInput", "advanced": false, "display_name": "Environment Variable Name", "dynamic": false, "info": "Name of the environment variable to get", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "env_var_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "EXCHANGERATE_API_KEY"}}, "tool_mode": false}, "showNode": true, "type": "GetEnvVar"}, "dragging": false, "id": "GetEnvVar-Zswa9", "measured": {"height": 218, "width": 320}, "position": {"x": -601.395205345592, "y": 785.7686263664053}, "selected": false, "type": "genericNode"}, {"data": {"id": "Prompt Template-NguBh", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {"template": ["EXCHANGERATE_API_KEY", "base"]}, "description": "Create a prompt template with dynamic variables.", "display_name": "Prompt Template", "documentation": "https://docs.langflow.org/components-prompts", "edited": true, "field_order": ["template", "if_else_input", "tool_placeholder"], "frozen": false, "icon": "braces", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Prompt", "group_outputs": false, "hidden": null, "method": "build_prompt", "name": "prompt", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "priority": 0, "template": {"EXCHANGERATE_API_KEY": {"advanced": false, "display_name": "EXCHANGERATE_API_KEY", "dynamic": false, "field_type": "str", "fileTypes": [], "file_path": "", "info": "", "input_types": ["Message"], "list": false, "load_from_db": false, "multiline": true, "name": "EXCHANGERATE_API_KEY", "placeholder": "", "required": false, "show": true, "title_case": false, "type": "str", "value": ""}, "_type": "Component", "base": {"advanced": false, "display_name": "base", "dynamic": false, "field_type": "str", "fileTypes": [], "file_path": "", "info": "", "input_types": ["Message"], "list": false, "load_from_db": false, "multiline": true, "name": "base", "placeholder": "", "required": false, "show": true, "title_case": false, "type": "str", "value": ""}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt Template\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    documentation: str = \"https://docs.langflow.org/components-prompts\"\n    icon = \"braces\"\n    trace_type = \"prompt\"\n    name = \"Prompt Template\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        StrInput(name=\"if_else_input\", display_name=\"If-else input\", input_types=[\"str\", \"Message\"]),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"}, "if_else_input": {"_input_type": "StrInput", "advanced": false, "display_name": "If-else input", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "if_else_input", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "template": {"_input_type": "PromptInput", "advanced": false, "display_name": "Template", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "prompt", "value": "https://v6.exchangerate-api.com/v6/{EXCHANGERATE_API_KEY}/latest/{base}"}, "tool_placeholder": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Tool Placeholder", "dynamic": false, "info": "A placeholder input for tool mode.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "tool_placeholder", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "Prompt Template"}, "dragging": false, "id": "Prompt Template-NguBh", "measured": {"height": 465, "width": 320}, "position": {"x": -194.96291999564943, "y": 376.39619349604885}, "selected": false, "type": "genericNode"}, {"data": {"id": "ParserComponent-xj4Nj", "node": {"base_classes": ["Message"], "beta": false, "category": "processing", "conditional_paths": [], "custom_fields": {}, "description": "Extracts text using a template.", "display_name": "Parser", "documentation": "https://docs.langflow.org/components-processing#parser", "edited": false, "field_order": ["input_data", "mode", "pattern", "sep"], "frozen": false, "icon": "braces", "key": "ParserComponent", "last_updated": "2025-10-06T16:13:01.394Z", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Parsed Text", "group_outputs": false, "method": "parse_combined_text", "name": "parsed_text", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.045603691595129614, "template": {"_type": "Component", "clean_data": {"_input_type": "BoolInput", "advanced": true, "display_name": "Clean Data", "dynamic": false, "info": "Enable to clean the data by removing empty rows and lines in each cell of the DataFrame/ Data object.", "list": false, "list_add_label": "Add More", "name": "clean_data", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"}, "input_data": {"_input_type": "HandleInput", "advanced": false, "display_name": "Data or DataFrame", "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "input_types": ["DataFrame", "Data"], "list": false, "list_add_label": "Add More", "name": "input_data", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "mode": {"_input_type": "TabInput", "advanced": false, "display_name": "Mode", "dynamic": false, "info": "Convert into raw string instead of using a template.", "name": "mode", "options": ["Parser", "Stringify"], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "tab", "value": "Parser"}, "pattern": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Template", "dynamic": true, "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "pattern", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{status_code}"}, "sep": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Separator", "dynamic": false, "info": "String used to separate rows/items.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sep", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "\n"}}, "tool_mode": false}, "showNode": true, "type": "ParserComponent"}, "dragging": false, "id": "ParserComponent-xj4Nj", "measured": {"height": 325, "width": 320}, "position": {"x": 645.773088932562, "y": 550.5568218694075}, "selected": false, "type": "genericNode"}, {"data": {"id": "CustomComponent-JUDbW", "node": {"template": {"_type": "Component", "chat_input": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "chat_input", "value": "", "display_name": "Chat Input", "advanced": false, "input_types": ["str", "Message"], "dynamic": false, "info": "JSON string with currency data", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import Any\r\nfrom langflow.custom.custom_component.component import Component\r\nfrom langflow.io import MessageTextInput, Output\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema.data import Data\r\nimport json\r\n\r\n\r\nclass CurrencyExtractor(Component):\r\n    display_name = \"Currency Extractor\"\r\n    description = \"Extract base_currency and target_currency from JSON chat_input\"\r\n    icon = \"currency-exchange\"\r\n    name = \"CurrencyExtractor\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"chat_input\",\r\n            display_name=\"Chat Input\",\r\n            info=\"JSON string with currency data\",\r\n            value=\"\",\r\n            required=True,\r\n            input_types=[\"str\", \"Message\"]\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"currencies\", display_name=\"Currencies\", method=\"extract_currencies\")\r\n    ]\r\n\r\n    def _get_text(self, v: Any) -> str:\r\n        \"\"\"Extract text from Message or dict\"\"\"\r\n        try:\r\n            if isinstance(v, Message):\r\n                return v.text or \"\"\r\n        except Exception:\r\n            pass\r\n        if isinstance(v, dict) and \"text\" in v:\r\n            return str(v.get(\"text\") or \"\")\r\n        return str(v or \"\")\r\n\r\n    def extract_currencies(self) -> Data:\r\n        \"\"\"Parse JSON and extract currency codes\"\"\"\r\n        chat_text = self._get_text(self.chat_input)\r\n        \r\n        try:\r\n            # Parse JSON\r\n            data = json.loads(chat_text)\r\n            \r\n            # Extract currencies\r\n            base_currency = data.get(\"base_currency\", \"\")\r\n            target_currency = data.get(\"target_currency\", \"\")\r\n            \r\n            # Normalize: strip whitespace and uppercase\r\n            base = base_currency.strip().upper() if base_currency else \"\"\r\n            target = target_currency.strip().upper() if target_currency else \"\"\r\n            \r\n            # Log for debugging\r\n            self.log(f\"Extracted: base={base}, target={target}\")\r\n            \r\n            if base and target:\r\n                return Data(data={\r\n                    \"base\": base,\r\n                    \"target\": target,\r\n                    \"success\": True\r\n                })\r\n            else:\r\n                self.log(\"Warning: Missing currency fields in JSON\")\r\n                return Data(data={\r\n                    \"base\": base or \"USD\",\r\n                    \"target\": target or \"RUB\",\r\n                    \"success\": False,\r\n                    \"error\": \"Missing currency fields\"\r\n                })\r\n                \r\n        except json.JSONDecodeError as e:\r\n            self.log(f\"Error: Invalid JSON - {str(e)}\")\r\n            return Data(data={\r\n                \"base\": \"USD\",\r\n                \"target\": \"RUB\",\r\n                \"success\": False,\r\n                \"error\": f\"Invalid JSON: {str(e)}\"\r\n            })\r\n        except Exception as e:\r\n            self.log(f\"Error: Unexpected error - {str(e)}\")\r\n            return Data(data={\r\n                \"base\": \"USD\",\r\n                \"target\": \"RUB\",\r\n                \"success\": False,\r\n                \"error\": str(e)\r\n            })\r\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}}, "description": "Extract base_currency and target_currency from JSON chat_input", "icon": "currency-exchange", "base_classes": ["Data"], "display_name": "Currency Extractor", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "currencies", "hidden": null, "display_name": "Currencies", "method": "extract_currencies", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["chat_input"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false}, "showNode": true, "type": "CurrencyExtractor"}, "dragging": false, "id": "CustomComponent-JUDbW", "measured": {"height": 218, "width": 320}, "position": {"x": -2708.7941781264244, "y": 582.5043009714749}, "selected": false, "type": "genericNode"}, {"data": {"id": "ParserComponent-lVb4k", "node": {"base_classes": ["Message"], "beta": false, "category": "processing", "conditional_paths": [], "custom_fields": {}, "description": "Extracts text using a template.", "display_name": "Parser", "documentation": "https://docs.langflow.org/components-processing#parser", "edited": false, "field_order": ["input_data", "mode", "pattern", "sep"], "frozen": false, "icon": "braces", "key": "ParserComponent", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Parsed Text", "group_outputs": false, "method": "parse_combined_text", "name": "parsed_text", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 2.220446049250313e-16, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"}, "input_data": {"_input_type": "HandleInput", "advanced": false, "display_name": "Data or DataFrame", "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "input_types": ["DataFrame", "Data"], "list": false, "list_add_label": "Add More", "name": "input_data", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "mode": {"_input_type": "TabInput", "advanced": false, "display_name": "Mode", "dynamic": false, "info": "Convert into raw string instead of using a template.", "name": "mode", "options": ["Parser", "Stringify"], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "tab", "value": "Parser"}, "pattern": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Template", "dynamic": true, "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "pattern", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{base}"}, "sep": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Separator", "dynamic": false, "info": "String used to separate rows/items.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sep", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "\n"}}, "tool_mode": false}, "showNode": true, "type": "ParserComponent"}, "dragging": false, "id": "ParserComponent-lVb4k", "measured": {"height": 325, "width": 320}, "position": {"x": -2019.5371827822214, "y": 990.291084611174}, "selected": false, "type": "genericNode"}, {"data": {"id": "CustomComponent-GcJgG", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u043a\u0430\u043a Message.text", "display_name": "Error Message Only", "documentation": "", "edited": true, "field_order": ["if_else_input", "error_code", "error_message", "error_type", "details"], "frozen": false, "icon": "alert-circle", "legacy": false, "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Message Output", "group_outputs": false, "hidden": null, "method": "build_message", "name": "message_output", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from typing import Any\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, Output\r\nfrom langflow.schema import Message\r\n\r\nclass ErrorMessageOnly(Component):\r\n    display_name = \"Error Message Only\"\r\n    description = \"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u043a\u0430\u043a Message.text\"\r\n    icon = \"alert-circle\"\r\n    name = \"ErrorMessageOnly\"\r\n\r\n    inputs = [\r\n        StrInput(name=\"if_else_input\", display_name=\"If-else input\", input_types=[\"str\", \"Message\"]),\r\n        StrInput(\r\n            name=\"error_code\",\r\n            display_name=\"Error Code\",\r\n            value=\"500\",\r\n            input_types=[\"str\", \"Message\"]\r\n        ),\r\n        StrInput(\r\n            name=\"error_message\",\r\n            display_name=\"Error Message\",\r\n            value=\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430.\",\r\n            input_types=[\"str\", \"Message\"]\r\n        ),\r\n        StrInput(\r\n            name=\"error_type\",\r\n            display_name=\"Error Type\",\r\n            value=\"runtime-error\",\r\n            input_types=[\"str\", \"Message\"],\r\n            required=False\r\n        ),\r\n        StrInput(\r\n            name=\"details\",\r\n            display_name=\"Details\",\r\n            info=\"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 (\u0441\u0442\u0440\u043e\u043a\u0430)\",\r\n            input_types=[\"str\", \"Message\"],\r\n            required=False\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            name=\"message_output\",\r\n            display_name=\"Message Output\",\r\n            method=\"build_message\"\r\n        )\r\n    ]\r\n\r\n    def _get_text(self, v: Any) -> str:\r\n        try:\r\n            if isinstance(v, Message):\r\n                return v.text or \"\"\r\n        except Exception:\r\n            pass\r\n        if isinstance(v, dict) and \"TEXT\" in v:\r\n            return str(v.get(\"TEXT\") or \"\")\r\n        return str(v or \"\")\r\n\r\n    def build_message(self) -> Message:\r\n        code = self._get_text(self.error_code).strip()\r\n        et = self._get_text(self.error_type).strip()\r\n        em = self._get_text(self.error_message).strip()\r\n        dt = self._get_text(self.details).strip() if self.details else \"\"\r\n\r\n \r\n        parts = []\r\n        if code:\r\n            parts.append(f\"Error {code}\")\r\n        if et:\r\n            parts.append(et)\r\n        head = \": \".join([p for p in [\" \".join(parts).strip(), em] if p])\r\n\r\n        text_msg = head if head else em or \"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430.\"\r\n        if dt:\r\n            text_msg = f\"{text_msg} \u2014 {dt}\"\r\n\r\n        return Message(text=text_msg)\r\n"}, "details": {"_input_type": "StrInput", "advanced": false, "display_name": "Details", "dynamic": false, "info": "\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 (\u0441\u0442\u0440\u043e\u043a\u0430)", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "details", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "error_code": {"_input_type": "StrInput", "advanced": false, "display_name": "Error Code", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "error_code", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "error_message": {"_input_type": "StrInput", "advanced": false, "display_name": "Error Message", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "error_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "error_type": {"_input_type": "StrInput", "advanced": false, "display_name": "Error Type", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "error_type", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "if_else_input": {"_input_type": "StrInput", "advanced": false, "display_name": "If-else input", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "if_else_input", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "ErrorMessageOnly"}, "dragging": false, "id": "CustomComponent-GcJgG", "measured": {"height": 546, "width": 320}, "position": {"x": 1800.420695541869, "y": 1633.1175103021394}, "selected": false, "type": "genericNode"}, {"data": {"id": "Prompt Template-7eaY5", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {"template": ["error-type"]}, "description": "Create a prompt template with dynamic variables.", "display_name": "Prompt Template", "documentation": "https://docs.langflow.org/components-prompts", "edited": false, "error": null, "field_order": ["template", "tool_placeholder"], "frozen": false, "full_path": null, "icon": "braces", "is_composition": null, "is_input": null, "is_output": null, "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "name": "", "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Prompt", "group_outputs": false, "hidden": null, "method": "build_prompt", "name": "prompt", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "priority": 0, "replacement": null, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt Template\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    documentation: str = \"https://docs.langflow.org/components-prompts\"\n    icon = \"braces\"\n    trace_type = \"prompt\"\n    name = \"Prompt Template\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"}, "error-type": {"advanced": false, "display_name": "error-type", "dynamic": false, "field_type": "str", "fileTypes": [], "file_path": "", "info": "", "input_types": ["Message"], "list": false, "load_from_db": false, "multiline": true, "name": "error-type", "placeholder": "", "required": false, "show": true, "title_case": false, "type": "str", "value": ""}, "template": {"_input_type": "PromptInput", "advanced": false, "display_name": "Template", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "name": "template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "prompt", "value": "API \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u043e\u0448\u0451\u043b \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e. \u0422\u0438\u043f \u043e\u0448\u0438\u0431\u043a\u0438: {error-type}"}, "tool_placeholder": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Tool Placeholder", "dynamic": false, "info": "A placeholder input for tool mode.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "tool_placeholder", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "Prompt Template"}, "dragging": false, "id": "Prompt Template-7eaY5", "measured": {"height": 301, "width": 320}, "position": {"x": 653.055136099948, "y": 1633.9968355832943}, "selected": false, "type": "genericNode"}, {"data": {"id": "CustomComponent-dBDOD", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Extracts error-type from nested JSON response", "display_name": "Extract Error Type", "documentation": "", "edited": true, "field_order": ["json_data"], "frozen": false, "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Error Type", "group_outputs": false, "hidden": null, "method": "extract_error", "name": "error_type", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom import Component\nfrom langflow.io import DataInput, Output\nfrom langflow.schema import Data, Message\nimport json\n\nclass ExtractErrorType(Component):\n    display_name = \"Extract Error Type\"\n    description = \"Extracts error-type from nested JSON response\"\n    \n    inputs = [\n        DataInput(\n            name=\"json_data\",\n            display_name=\"JSON Data\",\n            info=\"API response as Data object\"\n        )\n    ]\n    \n    outputs = [\n        Output(\n            name=\"error_type\",\n            display_name=\"Error Type\",\n            method=\"extract_error\"\n        )\n    ]\n    \n    def extract_error(self) -> Message:\n        try:\n            data = self.json_data.data if hasattr(self.json_data, 'data') else self.json_data\n            \n            if isinstance(data, dict):\n                result = data.get(\"result\", {})\n                error_type = result.get(\"error-type\", \"unknown-error\")\n            else:\n                parsed = json.loads(str(data))\n                result = parsed.get(\"result\", {})\n                error_type = result.get(\"error-type\", \"unknown-error\")\n            \n            self.log(f\"Extracted error-type: {error_type}\")\n            return Message(text=error_type)\n            \n        except Exception as e:\n            self.log(f\"Failed to extract error-type: {e}\")\n            return Message(text=\"error-extraction-failed\")\n"}, "json_data": {"_input_type": "DataInput", "advanced": false, "display_name": "JSON Data", "dynamic": false, "info": "API response as Data object", "input_types": ["Data"], "list": false, "list_add_label": "Add More", "name": "json_data", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "other", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "ExtractErrorType"}, "dragging": false, "id": "CustomComponent-dBDOD", "measured": {"height": 164, "width": 320}, "position": {"x": 261.8040150487377, "y": 1096.47786791923}, "selected": false, "type": "genericNode"}, {"data": {"id": "CustomComponent-UTHj3", "node": {"base_classes": ["Data"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Validates base and target currency codes against an allow", "display_name": "Check Currency", "documentation": "", "edited": true, "field_order": ["currency_dict", "base_currency", "target_currency"], "frozen": false, "icon": "check", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Result (Data)", "group_outputs": false, "hidden": null, "method": "build_output", "name": "output", "options": null, "required_inputs": null, "selected": "Data", "tool_mode": true, "types": ["Data"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "base_currency": {"_input_type": "StrInput", "advanced": false, "display_name": "Base Currency", "dynamic": false, "info": "ISO 4217 code, e.g., USD", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "base_currency", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "# from langflow.field_typing import Data\nfrom typing import Dict, Any, List\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import MessageTextInput, Output, StrInput, DataInput\nfrom langflow.schema import Data\n\n\nclass CheckCurrency(Component):\n    display_name = \"Check Currency\"\n    description = \"Validates base and target currency codes against an allow\"\n    icon = \"check\"\n    name = \"CheckCurrency\"\n\n    inputs = [\n        DataInput(\n            name=\"currency_dict\",\n            display_name=\"Allowed Codes (Data)\",\n            info=\"JSON Data from file with currency\",\n            input_types=[\"Data\"],\n        ),\n        StrInput(\n            name=\"base_currency\",\n            display_name=\"Base Currency\",\n            info=\"ISO 4217 code, e.g., USD\",\n            value=\"USD\",\n            input_types=[\"str\", \"Message\"], \n        ),\n        StrInput(\n            name=\"target_currency\",\n            display_name=\"Target Currency\",\n            info=\"ISO 4217 code, e.g., RUB\",\n            value=\"RUB\",\n            input_types=[\"str\", \"Message\"],\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Result (Data)\", name=\"output\", method=\"build_output\"),\n    ]\n    \n    def _normalize(self, s: Any) -> str:\n        return self._get_text(s).strip().upper()\n    \n    def _get_keys(self) -> List[str]:\n        \"\"\"\n        \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435.\n        \"\"\"\n        payload = self.currency_dict.data if hasattr(self.currency_dict, \"data\") else self.currency_dict\n        if not isinstance(payload, dict):\n            return []\n        \n        result = []\n        for key in payload.keys():\n            if isinstance(key, str):\n                normalized_key = self._normalize(key)\n                result.append(normalized_key)\n                \n        return result\n    \n    def _get_text(self, v: Any) -> str:\n        try:\n            if isinstance(v, Message):\n                return v.text or \"\"\n        except Exception:\n            pass\n        if isinstance(v, dict) and \"TEXT\" in v:\n            return str(v.get(\"TEXT\") or \"\")\n        return str(v or \"\")\n\n\n    def build_output(self) -> Data:\n        base = self._normalize(self.base_currency)\n        target = self._normalize(self.target_currency)\n        allowed_keys = self._get_keys()\n        final_message = \"\"\n        if not base:\n            final_message += \"\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f base_currency\\n\"\n        if not target:\n           final_message += \"\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f target_currency\\n\"\n        if base and base not in allowed_keys:\n             final_message += f\"Base \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f: {base}\\n\"\n        if target and target not in allowed_keys:\n             final_message += f\"target \u0432\u0430\u043b\u044e\u0442\u0430 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f: {target}\\n\"\n        \n        if final_message != \"\":\n            structured = {\n            \"ok\": False,\n            \"text\": final_message\n            }\n            return Data(\n                data=structured\n            )\n\n        payload = {\n            \"ok\": True,\n        }\n        result = Data(data=payload)\n        self.status = result\n        return result\n\n"}, "currency_dict": {"_input_type": "DataInput", "advanced": false, "display_name": "Allowed Codes (Data)", "dynamic": false, "info": "JSON Data from file with currency", "input_types": ["Data"], "list": false, "list_add_label": "Add More", "name": "currency_dict", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "other", "value": ""}, "target_currency": {"_input_type": "StrInput", "advanced": false, "display_name": "Target Currency", "dynamic": false, "info": "ISO 4217 code, e.g., RUB", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "target_currency", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "CheckCurrency"}, "dragging": false, "id": "CustomComponent-UTHj3", "measured": {"height": 344, "width": 320}, "position": {"x": -1458.1455363024254, "y": 92.06767562415993}, "selected": false, "type": "genericNode"}, {"data": {"id": "ParserComponent-d1wvy", "node": {"base_classes": ["Message"], "beta": false, "category": "processing", "conditional_paths": [], "custom_fields": {}, "description": "Extracts text using a template.", "display_name": "Parser", "documentation": "https://docs.langflow.org/components-processing#parser", "edited": false, "field_order": ["input_data", "mode", "pattern", "sep"], "frozen": false, "icon": "braces", "key": "ParserComponent", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Parsed Text", "group_outputs": false, "method": "parse_combined_text", "name": "parsed_text", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 2.220446049250313e-16, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"}, "input_data": {"_input_type": "HandleInput", "advanced": false, "display_name": "Data or DataFrame", "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "input_types": ["DataFrame", "Data"], "list": false, "list_add_label": "Add More", "name": "input_data", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "mode": {"_input_type": "TabInput", "advanced": false, "display_name": "Mode", "dynamic": false, "info": "Convert into raw string instead of using a template.", "name": "mode", "options": ["Parser", "Stringify"], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "tab", "value": "Parser"}, "pattern": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Template", "dynamic": true, "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "pattern", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{target}"}, "sep": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Separator", "dynamic": false, "info": "String used to separate rows/items.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sep", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "\n"}}, "tool_mode": false}, "showNode": true, "type": "ParserComponent"}, "dragging": false, "id": "ParserComponent-d1wvy", "measured": {"height": 325, "width": 320}, "position": {"x": -2114.890283395092, "y": 437.8009274884164}, "selected": false, "type": "genericNode"}, {"data": {"id": "ParserComponent-mvU7y", "node": {"base_classes": ["Message"], "beta": false, "category": "processing", "conditional_paths": [], "custom_fields": {}, "description": "Extracts text using a template.", "display_name": "Parser", "documentation": "https://docs.langflow.org/components-processing#parser", "edited": false, "field_order": ["input_data", "mode", "pattern", "sep"], "frozen": false, "icon": "braces", "key": "ParserComponent", "last_updated": "2025-10-06T16:13:01.394Z", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Parsed Text", "group_outputs": false, "method": "parse_combined_text", "name": "parsed_text", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.045603691595129614, "template": {"_type": "Component", "clean_data": {"_input_type": "BoolInput", "advanced": true, "display_name": "Clean Data", "dynamic": false, "info": "Enable to clean the data by removing empty rows and lines in each cell of the DataFrame/ Data object.", "list": false, "list_add_label": "Add More", "name": "clean_data", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"}, "input_data": {"_input_type": "HandleInput", "advanced": false, "display_name": "Data or DataFrame", "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "input_types": ["DataFrame", "Data"], "list": false, "list_add_label": "Add More", "name": "input_data", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "mode": {"_input_type": "TabInput", "advanced": false, "display_name": "Mode", "dynamic": false, "info": "Convert into raw string instead of using a template.", "name": "mode", "options": ["Parser", "Stringify"], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "tab", "value": "Parser"}, "pattern": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Template", "dynamic": true, "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "pattern", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{ok}"}, "sep": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Separator", "dynamic": false, "info": "String used to separate rows/items.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sep", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "\n"}}, "tool_mode": false}, "showNode": true, "type": "ParserComponent"}, "dragging": false, "id": "ParserComponent-mvU7y", "measured": {"height": 325, "width": 320}, "position": {"x": -1054.4690299414665, "y": 59.66394357243844}, "selected": false, "type": "genericNode"}, {"data": {"id": "ConditionalRouter-eSYVE", "node": {"base_classes": ["Message"], "beta": false, "category": "logic", "conditional_paths": [], "custom_fields": {}, "description": "Routes an input message to a corresponding output based on text comparison.", "display_name": "If-Else", "documentation": "https://docs.langflow.org/components-logic#conditional-router-if-else-component", "edited": false, "field_order": ["input_text", "operator", "match_text", "case_sensitive", "true_case_message", "false_case_message", "max_iterations", "default_route"], "frozen": false, "icon": "split", "key": "ConditionalRouter", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "True", "group_outputs": true, "method": "true_response", "name": "true_result", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}, {"allows_loop": false, "cache": true, "display_name": "False", "group_outputs": true, "method": "false_response", "name": "false_result", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.001, "template": {"_type": "Component", "case_sensitive": {"_input_type": "BoolInput", "advanced": true, "display_name": "Case Sensitive", "dynamic": false, "info": "If true, the comparison will be case sensitive.", "list": false, "list_add_label": "Add More", "name": "case_sensitive", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "import re\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    documentation: str = \"https://docs.langflow.org/components-logic#conditional-router-if-else-component\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\n                \"equals\",\n                \"not equals\",\n                \"contains\",\n                \"starts with\",\n                \"ends with\",\n                \"regex\",\n                \"less than\",\n                \"less than or equal\",\n                \"greater than\",\n                \"greater than or equal\",\n            ],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=True,\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"true_case_message\",\n            display_name=\"Case True\",\n            info=\"The message to pass if the condition is True.\",\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"false_case_message\",\n            display_name=\"Case False\",\n            info=\"The message to pass if the condition is False.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\", group_outputs=True),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\", group_outputs=True),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        if operator in [\"less than\", \"less than or equal\", \"greater than\", \"greater than or equal\"]:\n            try:\n                input_num = float(input_text)\n                match_num = float(match_text)\n                if operator == \"less than\":\n                    return input_num < match_num\n                if operator == \"less than or equal\":\n                    return input_num <= match_num\n                if operator == \"greater than\":\n                    return input_num > match_num\n                if operator == \"greater than or equal\":\n                    return input_num >= match_num\n            except ValueError:\n                return False  # Invalid number format for comparison\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        \"\"\"Handles cycle iteration counting and branch exclusion.\n\n        Uses two complementary mechanisms:\n        1. stop() - ACTIVE/INACTIVE state for cycle management (gets reset each iteration)\n        2. exclude_branch_conditionally() - Persistent exclusion for conditional routing\n\n        When max_iterations is reached, breaks the cycle by allowing the default_route to execute.\n        \"\"\"\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            current_iteration = self.ctx.get(f\"{self._id}_iteration\", 0)\n\n            # Check if max iterations reached and we're trying to stop the default route\n            if current_iteration >= self.max_iterations and route_to_stop == self.default_route:\n                # Clear ALL conditional exclusions to allow default route to execute\n                if self._id in self.graph.conditional_exclusion_sources:\n                    previous_exclusions = self.graph.conditional_exclusion_sources[self._id]\n                    self.graph.conditionally_excluded_vertices -= previous_exclusions\n                    del self.graph.conditional_exclusion_sources[self._id]\n\n                # Switch which route to stop - stop the NON-default route to break the cycle\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n\n                # Call stop to break the cycle\n                self.stop(route_to_stop)\n                # Don't apply conditional exclusion when breaking cycle\n                return\n\n            # Normal case: Use BOTH mechanisms\n            # 1. stop() for cycle management (marks INACTIVE, updates run manager, gets reset)\n            self.stop(route_to_stop)\n\n            # 2. Conditional exclusion for persistent routing (doesn't get reset except by this router)\n            self.graph.exclude_branch_conditionally(self._id, output_name=route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n\n        # Check if we should force output due to max_iterations on default route\n        current_iteration = self.ctx.get(f\"{self._id}_iteration\", 0)\n        force_output = current_iteration >= self.max_iterations and self.default_route == \"true_result\"\n\n        if result or force_output:\n            self.status = self.true_case_message\n            if not force_output:  # Only stop the other branch if not forcing due to max iterations\n                self.iterate_and_stop_once(\"false_result\")\n            return self.true_case_message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n\n        if not result:\n            self.status = self.false_case_message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.false_case_message\n\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n"}, "default_route": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Default Route", "dynamic": false, "external_options": {}, "info": "The default route to take when max iterations are reached.", "name": "default_route", "options": ["true_result", "false_result"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "false_result"}, "false_case_message": {"_input_type": "MessageInput", "advanced": true, "display_name": "Case False", "dynamic": false, "info": "The message to pass if the condition is False.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "false_case_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "input_text": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Text Input", "dynamic": false, "info": "The primary text input for the operation.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_text", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "match_text": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Match Text", "dynamic": false, "info": "The text input to compare against.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "match_text", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "True"}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of iterations for the conditional router.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 10}, "operator": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Operator", "dynamic": false, "external_options": {}, "info": "The operator to apply for comparing the texts.", "name": "operator", "options": ["equals", "not equals", "contains", "starts with", "ends with", "regex", "less than", "less than or equal", "greater than", "greater than or equal"], "options_metadata": [], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "equals"}, "true_case_message": {"_input_type": "MessageInput", "advanced": true, "display_name": "Case True", "dynamic": false, "info": "The message to pass if the condition is True.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "true_case_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "ConditionalRouter"}, "dragging": false, "id": "ConditionalRouter-eSYVE", "measured": {"height": 425, "width": 320}, "position": {"x": -662.7845453230125, "y": -251.81819876567732}, "selected": false, "type": "genericNode"}, {"data": {"id": "ErrorJSONFormatter-50k41", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 (Message.text) \u0431\u0435\u0437 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430", "display_name": "JSON Formatter (Message Only)", "documentation": "", "edited": true, "field_order": ["if_else_input", "status_code", "message", "error_type", "additional_info"], "frozen": false, "icon": "alert-circle", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Message Output", "group_outputs": false, "hidden": null, "method": "build_message", "name": "message_output", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "additional_info": {"_input_type": "StrInput", "advanced": false, "display_name": "Additional Info", "dynamic": false, "info": "Optional details (text)", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "additional_info", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from typing import Any\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, Output\r\nfrom langflow.schema import Message\r\n\r\nclass JSONFormatterMessageOnly(Component):\r\n    display_name = \"JSON Formatter (Message Only)\"\r\n    description = \"\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 (Message.text) \u0431\u0435\u0437 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430\"\r\n    icon = \"alert-circle\"\r\n    name = \"JSONFormatterMessageOnly\"\r\n\r\n    inputs = [\r\n        StrInput(name=\"if_else_input\", display_name=\"If-else input\", input_types=[\"str\", \"Message\"]),\r\n        StrInput(\r\n            name=\"status_code\",\r\n            display_name=\"Status Code\",\r\n            info=\"HTTP status code or error code\",\r\n            value=\"200\",\r\n            input_types=[\"str\", \"Message\"]\r\n        ),\r\n        StrInput(\r\n            name=\"message\",\r\n            display_name=\"Message\",\r\n            info=\"Human-readable message\",\r\n            value=\"\u041a\u0443\u0440\u0441 \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u043a \u0440\u0443\u0431\u043b\u044e: 82.203\",\r\n            input_types=[\"str\", \"Message\"]\r\n        ),\r\n        StrInput(\r\n            name=\"error_type\",\r\n            display_name=\"Error Type\",\r\n            info=\"Type of the error (empty for success)\",\r\n            value=\"\",\r\n            input_types=[\"str\", \"Message\"],\r\n            required=False\r\n        ),\r\n        StrInput(\r\n            name=\"additional_info\",\r\n            display_name=\"Additional Info\",\r\n            info=\"Optional details (text)\",\r\n            input_types=[\"str\", \"Message\"],\r\n            required=False\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            name=\"message_output\",\r\n            display_name=\"Message Output\",\r\n            method=\"build_message\"\r\n        )\r\n    ]\r\n\r\n    def _get_text(self, v: Any) -> str:\r\n        try:\r\n            if isinstance(v, Message):\r\n                return v.text or \"\"\r\n        except Exception:\r\n            pass\r\n        if isinstance(v, dict) and \"TEXT\" in v:\r\n            return str(v.get(\"TEXT\") or \"\")\r\n        return str(v or \"\")\r\n\r\n    def build_message(self) -> Message:\r\n        status_code = (self._get_text(self.status_code) or \"\").strip()\r\n        ok = status_code == \"200\"\r\n\r\n        if ok:\r\n            text_msg = self._get_text(self.message).strip()\r\n            if not text_msg:\r\n                text_msg = \"OK\"\r\n            return Message(text=text_msg)\r\n\r\n        # \u041e\u0448\u0438\u0431\u043a\u0430: \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430\r\n        et = self._get_text(self.error_type).strip()\r\n        em = self._get_text(self.message).strip()\r\n        info = self._get_text(self.additional_info).strip() if self.additional_info else \"\"\r\n\r\n        parts = []\r\n        if status_code:\r\n            parts.append(f\"Error {status_code}\")\r\n        if et:\r\n            parts.append(et)\r\n        head = \": \".join([p for p in [\" \".join(parts).strip(), em] if p])\r\n\r\n        msg = head if head else em or \"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430.\"\r\n        if info:\r\n            msg = f\"{msg} \u2014 {info}\"\r\n\r\n        return Message(text=msg)\r\n"}, "error_type": {"_input_type": "StrInput", "advanced": false, "display_name": "Error Type", "dynamic": false, "info": "Type of the error (empty for success)", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "error_type", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "if_else_input": {"_input_type": "StrInput", "advanced": false, "display_name": "If-else input", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "if_else_input", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "message": {"_input_type": "StrInput", "advanced": false, "display_name": "Message", "dynamic": false, "info": "Human-readable message", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "status_code": {"_input_type": "StrInput", "advanced": false, "display_name": "Status Code", "dynamic": false, "info": "HTTP status code or error code", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "status_code", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "JSONFormatterMessageOnly"}, "dragging": false, "id": "ErrorJSONFormatter-50k41", "measured": {"height": 546, "width": 320}, "position": {"x": 1938.770368097872, "y": 868.8432889084042}, "selected": false, "type": "genericNode"}, {"data": {"id": "CustomComponent-gBl2c", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Extracts conversion one currency to another", "display_name": "Extract conversion", "documentation": "", "edited": true, "field_order": ["json_data", "base_currency", "target_currency"], "frozen": false, "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Conversion rate", "group_outputs": false, "hidden": null, "method": "extract_conv_rate", "name": "conversion_rate", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "base_currency": {"_input_type": "StrInput", "advanced": false, "display_name": "Base Currency", "dynamic": false, "info": "ISO 4217 code, e.g., USD", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "base_currency", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from typing import Any\nfrom langflow.custom import Component\nfrom langflow.io import DataInput, Output\nfrom langflow.schema import Data, Message\nimport json\n\nclass ExtractConversion(Component):\n    display_name = \"Extract conversion\"\n    description = \"Extracts conversion one currency to another\"\n    \n    inputs = [\n        DataInput(\n            name=\"json_data\",\n            display_name=\"JSON Data\",\n            info=\"API response as Data object\"\n        ),\n        StrInput(\n            name=\"base_currency\",\n            display_name=\"Base Currency\",\n            info=\"ISO 4217 code, e.g., USD\",\n            value=\"USD\",\n            input_types=[\"str\", \"Message\"],\n        ),\n        StrInput(\n            name=\"target_currency\",\n            display_name=\"Target Currency\",\n            info=\"ISO 4217 code, e.g., RUB\",\n            value=\"RUB\",\n            input_types=[\"str\", \"Message\"],\n        ),\n    ]\n    \n    outputs = [\n        Output(\n            name=\"conversion_rate\",\n            display_name=\"Conversion rate\",\n            method=\"extract_conv_rate\"\n        )\n    ]\n    \n    def _get_text(self, v: Any) -> str:\n        try:\n            if isinstance(v, Message):\n                return v.text or \"\"\n        except Exception:\n            pass\n        if isinstance(v, dict) and \"TEXT\" in v:\n            return str(v.get(\"TEXT\") or \"\")\n        return str(v or \"\")\n    \n    def _normalize(self, s: Any) -> str:\n        return self._get_text(s).strip().upper()\n    \n    def extract_conv_rate(self) -> Message:\n        try:\n            data = self.json_data.data if hasattr(self.json_data, 'data') else self.json_data\n            \n            if isinstance(data, dict):\n                result = data.get(\"result\", {})\n                conversion_rates = result.get(\"conversion_rates\", None)\n            else:\n                parsed = json.loads(str(data))\n                result = parsed.get(\"result\", {})\n                conversion_rates = result.get(\"conversion_rates\", None)\n            \n            target = self._normalize(self.target_currency)\n            base = self._normalize(self.base_currency)\n            \n            conv_rate_for_target = conversion_rates[target]\n            return Message(text=f\"\u041a\u0443\u0440\u0441 {base} \u043a {target}: {conv_rate_for_target}\")\n            \n        except Exception as e:\n            self.log(f\"Failed to extract conversion rate: {e}\")\n            return Message(text=\"conversion-rate-extraction-failed\")"}, "json_data": {"_input_type": "DataInput", "advanced": false, "display_name": "JSON Data", "dynamic": false, "info": "API response as Data object", "input_types": ["Data"], "list": false, "list_add_label": "Add More", "name": "json_data", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "other", "value": ""}, "target_currency": {"_input_type": "StrInput", "advanced": false, "display_name": "Target Currency", "dynamic": false, "info": "ISO 4217 code, e.g., RUB", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "target_currency", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "ExtractConversion"}, "dragging": false, "id": "CustomComponent-gBl2c", "measured": {"height": 328, "width": 320}, "position": {"x": 863.1807092363211, "y": 991.5257284325824}, "selected": false, "type": "genericNode"}, {"data": {"id": "ConditionalRouter-BM9eG", "node": {"base_classes": ["Message"], "beta": false, "category": "logic", "conditional_paths": [], "custom_fields": {}, "description": "Routes an input message to a corresponding output based on text comparison.", "display_name": "If-Else", "documentation": "https://docs.langflow.org/components-logic#conditional-router-if-else-component", "edited": false, "field_order": ["input_text", "operator", "match_text", "case_sensitive", "true_case_message", "false_case_message", "max_iterations", "default_route"], "frozen": false, "icon": "split", "key": "ConditionalRouter", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "True", "group_outputs": true, "method": "true_response", "name": "true_result", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}, {"allows_loop": false, "cache": true, "display_name": "False", "group_outputs": true, "method": "false_response", "name": "false_result", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.001, "template": {"_type": "Component", "case_sensitive": {"_input_type": "BoolInput", "advanced": true, "display_name": "Case Sensitive", "dynamic": false, "info": "If true, the comparison will be case sensitive.", "list": false, "list_add_label": "Add More", "name": "case_sensitive", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}, "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "import re\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    documentation: str = \"https://docs.langflow.org/components-logic#conditional-router-if-else-component\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\n                \"equals\",\n                \"not equals\",\n                \"contains\",\n                \"starts with\",\n                \"ends with\",\n                \"regex\",\n                \"less than\",\n                \"less than or equal\",\n                \"greater than\",\n                \"greater than or equal\",\n            ],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=True,\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"true_case_message\",\n            display_name=\"Case True\",\n            info=\"The message to pass if the condition is True.\",\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"false_case_message\",\n            display_name=\"Case False\",\n            info=\"The message to pass if the condition is False.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\", group_outputs=True),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\", group_outputs=True),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        if operator in [\"less than\", \"less than or equal\", \"greater than\", \"greater than or equal\"]:\n            try:\n                input_num = float(input_text)\n                match_num = float(match_text)\n                if operator == \"less than\":\n                    return input_num < match_num\n                if operator == \"less than or equal\":\n                    return input_num <= match_num\n                if operator == \"greater than\":\n                    return input_num > match_num\n                if operator == \"greater than or equal\":\n                    return input_num >= match_num\n            except ValueError:\n                return False  # Invalid number format for comparison\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        \"\"\"Handles cycle iteration counting and branch exclusion.\n\n        Uses two complementary mechanisms:\n        1. stop() - ACTIVE/INACTIVE state for cycle management (gets reset each iteration)\n        2. exclude_branch_conditionally() - Persistent exclusion for conditional routing\n\n        When max_iterations is reached, breaks the cycle by allowing the default_route to execute.\n        \"\"\"\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            current_iteration = self.ctx.get(f\"{self._id}_iteration\", 0)\n\n            # Check if max iterations reached and we're trying to stop the default route\n            if current_iteration >= self.max_iterations and route_to_stop == self.default_route:\n                # Clear ALL conditional exclusions to allow default route to execute\n                if self._id in self.graph.conditional_exclusion_sources:\n                    previous_exclusions = self.graph.conditional_exclusion_sources[self._id]\n                    self.graph.conditionally_excluded_vertices -= previous_exclusions\n                    del self.graph.conditional_exclusion_sources[self._id]\n\n                # Switch which route to stop - stop the NON-default route to break the cycle\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n\n                # Call stop to break the cycle\n                self.stop(route_to_stop)\n                # Don't apply conditional exclusion when breaking cycle\n                return\n\n            # Normal case: Use BOTH mechanisms\n            # 1. stop() for cycle management (marks INACTIVE, updates run manager, gets reset)\n            self.stop(route_to_stop)\n\n            # 2. Conditional exclusion for persistent routing (doesn't get reset except by this router)\n            self.graph.exclude_branch_conditionally(self._id, output_name=route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n\n        # Check if we should force output due to max_iterations on default route\n        current_iteration = self.ctx.get(f\"{self._id}_iteration\", 0)\n        force_output = current_iteration >= self.max_iterations and self.default_route == \"true_result\"\n\n        if result or force_output:\n            self.status = self.true_case_message\n            if not force_output:  # Only stop the other branch if not forcing due to max iterations\n                self.iterate_and_stop_once(\"false_result\")\n            return self.true_case_message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n\n        if not result:\n            self.status = self.false_case_message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.false_case_message\n\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n"}, "default_route": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Default Route", "dynamic": false, "external_options": {}, "info": "The default route to take when max iterations are reached.", "name": "default_route", "options": ["true_result", "false_result"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "false_result"}, "false_case_message": {"_input_type": "MessageInput", "advanced": true, "display_name": "Case False", "dynamic": false, "info": "The message to pass if the condition is False.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "false_case_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "input_text": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Text Input", "dynamic": false, "info": "The primary text input for the operation.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_text", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "match_text": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Match Text", "dynamic": false, "info": "The text input to compare against.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "match_text", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "200"}, "max_iterations": {"_input_type": "IntInput", "advanced": true, "display_name": "Max Iterations", "dynamic": false, "info": "The maximum number of iterations for the conditional router.", "list": false, "list_add_label": "Add More", "name": "max_iterations", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "int", "value": 10}, "operator": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Operator", "dynamic": false, "external_options": {}, "info": "The operator to apply for comparing the texts.", "name": "operator", "options": ["equals", "not equals", "contains", "starts with", "ends with", "regex", "less than", "less than or equal", "greater than", "greater than or equal"], "options_metadata": [], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "equals"}, "true_case_message": {"_input_type": "MessageInput", "advanced": true, "display_name": "Case True", "dynamic": false, "info": "The message to pass if the condition is True.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "true_case_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}}, "tool_mode": false}, "showNode": true, "type": "ConditionalRouter"}, "dragging": false, "id": "ConditionalRouter-BM9eG", "measured": {"height": 425, "width": 320}, "position": {"x": 1283.3940662422292, "y": 338.97132960748564}, "selected": false, "type": "genericNode"}, {"data": {"id": "CustomComponent-0wmoh", "node": {"base_classes": ["Data"], "beta": false, "conditional_paths": [], "custom_fields": {}, "display_name": "Load JSON", "documentation": "", "edited": true, "field_order": ["path"], "frozen": false, "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Data", "group_outputs": false, "hidden": null, "method": "build", "name": "output", "options": null, "required_inputs": null, "selected": "Data", "tool_mode": true, "types": ["Data"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom import Component\nfrom langflow.io import StrInput, Output\nfrom langflow.schema import Data\nimport json, os\n\nclass LoadJSON(Component):\n    display_name = \"Load JSON\"\n    inputs = [\n        StrInput(name=\"path\", display_name=\"Path\", value=\"/app/data/converting.json\")\n    ]\n    outputs = [\n        Output(display_name=\"Data\", name=\"output\", method=\"build\", type=\"Data\")\n    ]\n    def build(self) -> Data:\n        path = self.path\n        if not os.path.exists(path):\n            return Data(data={\"error\": f\"not found: {path}\"})\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            obj = json.load(f)\n        return Data(data=obj)\n"}, "path": {"_input_type": "StrInput", "advanced": false, "display_name": "Path", "dynamic": false, "info": "", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "path", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "/app/data/converting.json"}}, "tool_mode": false}, "showNode": true, "type": "LoadJSON"}, "dragging": false, "id": "CustomComponent-0wmoh", "measured": {"height": 174, "width": 320}, "position": {"x": -2063.5936539631202, "y": 130.71562880092262}, "selected": false, "type": "genericNode"}, {"data": {"id": "ChatOutput-qmcgh", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Display a chat message in the Playground.", "display_name": "Chat Output", "documentation": "https://docs.langflow.org/components-io#chat-output", "edited": false, "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template"], "frozen": false, "icon": "MessagesSquare", "legacy": false, "metadata": {}, "minimized": true, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Output Message", "group_outputs": false, "method": "message_response", "name": "message", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            clean_data: bool = getattr(self, \"clean_data\", False)\n            return \"\\n\".join([safe_convert(item, clean_data=clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"}, "data_template": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Data Template", "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "data_template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{text}"}, "input_value": {"_input_type": "HandleInput", "advanced": false, "display_name": "Inputs", "dynamic": false, "info": "Message to be passed as output.", "input_types": ["Data", "DataFrame", "Message"], "list": false, "list_add_label": "Add More", "name": "input_value", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "external_options": {}, "info": "Type of sender.", "name": "sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "AI"}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}}, "tool_mode": false}, "showNode": false, "type": "ChatOutput"}, "dragging": false, "id": "ChatOutput-qmcgh", "measured": {"height": 47, "width": 192}, "position": {"x": 2290.888538172838, "y": 1998.770684354578}, "selected": false, "type": "genericNode"}, {"data": {"id": "ChatOutput-sFprI", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Display a chat message in the Playground.", "display_name": "Chat Output", "documentation": "https://docs.langflow.org/components-io#chat-output", "edited": false, "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template"], "frozen": false, "icon": "MessagesSquare", "legacy": false, "metadata": {}, "minimized": true, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Output Message", "group_outputs": false, "method": "message_response", "name": "message", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            clean_data: bool = getattr(self, \"clean_data\", False)\n            return \"\\n\".join([safe_convert(item, clean_data=clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"}, "data_template": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Data Template", "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "data_template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{text}"}, "input_value": {"_input_type": "HandleInput", "advanced": false, "display_name": "Inputs", "dynamic": false, "info": "Message to be passed as output.", "input_types": ["Data", "DataFrame", "Message"], "list": false, "list_add_label": "Add More", "name": "input_value", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "external_options": {}, "info": "Type of sender.", "name": "sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "AI"}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}}, "tool_mode": false}, "showNode": false, "type": "ChatOutput"}, "dragging": false, "id": "ChatOutput-sFprI", "measured": {"height": 47, "width": 192}, "position": {"x": 1024.371985942687, "y": 74.94315214698634}, "selected": false, "type": "genericNode"}, {"data": {"id": "ChatOutput-mnS3w", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Display a chat message in the Playground.", "display_name": "Chat Output", "documentation": "https://docs.langflow.org/components-io#chat-output", "edited": false, "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template"], "frozen": false, "icon": "MessagesSquare", "legacy": false, "metadata": {}, "minimized": true, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Output Message", "group_outputs": false, "method": "message_response", "name": "message", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            clean_data: bool = getattr(self, \"clean_data\", False)\n            return \"\\n\".join([safe_convert(item, clean_data=clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"}, "data_template": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Data Template", "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "data_template", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{text}"}, "input_value": {"_input_type": "HandleInput", "advanced": false, "display_name": "Inputs", "dynamic": false, "info": "Message to be passed as output.", "input_types": ["Data", "DataFrame", "Message"], "list": false, "list_add_label": "Add More", "name": "input_value", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "sender": {"_input_type": "DropdownInput", "advanced": true, "combobox": false, "dialog_inputs": {}, "display_name": "Sender Type", "dynamic": false, "external_options": {}, "info": "Type of sender.", "name": "sender", "options": ["Machine", "User"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "Machine"}, "sender_name": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Sender Name", "dynamic": false, "info": "Name of the sender.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sender_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "AI"}, "session_id": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Session ID", "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "session_id", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "should_store_message": {"_input_type": "BoolInput", "advanced": true, "display_name": "Store Messages", "dynamic": false, "info": "Store the message in the history.", "list": false, "list_add_label": "Add More", "name": "should_store_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "bool", "value": true}}, "tool_mode": false}, "showNode": false, "type": "ChatOutput"}, "dragging": false, "id": "ChatOutput-mnS3w", "measured": {"height": 47, "width": 192}, "position": {"x": 2330.4229539401, "y": 1356.9924098188162}, "selected": false, "type": "genericNode"}, {"data": {"id": "ParserComponent-egp4X", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Extracts text using a template.", "display_name": "Parser", "documentation": "https://docs.langflow.org/components-processing#parser", "edited": true, "field_order": ["input_data", "if_else_input", "mode", "pattern", "sep"], "frozen": false, "icon": "braces", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Parsed Text", "group_outputs": false, "hidden": null, "method": "parse_combined_text", "name": "parsed_text", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        StrInput(name=\"if_else_input\", display_name=\"If-else input\", input_types=[\"str\", \"Message\"]),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"}, "if_else_input": {"_input_type": "StrInput", "advanced": false, "display_name": "If-else input", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "if_else_input", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "input_data": {"_input_type": "HandleInput", "advanced": false, "display_name": "Data or DataFrame", "dynamic": false, "info": "Accepts either a DataFrame or a Data object.", "input_types": ["DataFrame", "Data"], "list": false, "list_add_label": "Add More", "name": "input_data", "placeholder": "", "required": true, "show": true, "title_case": false, "trace_as_metadata": true, "type": "other", "value": ""}, "mode": {"_input_type": "TabInput", "advanced": false, "display_name": "Mode", "dynamic": false, "info": "Convert into raw string instead of using a template.", "name": "mode", "options": ["Parser", "Stringify"], "placeholder": "", "real_time_refresh": true, "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "tab", "value": "Parser"}, "pattern": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "Template", "dynamic": true, "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "pattern", "placeholder": "", "required": true, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "{text}"}, "sep": {"_input_type": "MessageTextInput", "advanced": true, "display_name": "Separator", "dynamic": false, "info": "String used to separate rows/items.", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "sep", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "\n"}}, "tool_mode": false}, "showNode": true, "type": "ParserComponent"}, "dragging": false, "id": "ParserComponent-egp4X", "measured": {"height": 407, "width": 320}, "position": {"x": 545.7052722291188, "y": -58.694345863353746}, "selected": false, "type": "genericNode"}, {"id": "TextOutput-FmVJk", "type": "genericNode", "position": {"x": -2642.770125278326, "y": 2064.392919941276}, "data": {"node": {"template": {"_type": "Component", "input_value": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "trace_as_input": true, "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Inputs", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "Text to be passed as output.", "title_case": false, "type": "other", "_input_type": "DataInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Input logger\"\n    description = \"INput logger.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-output\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        data = self.input_value.data\n        self.status = data\n        self.log(str(data))\n        return {}\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}}, "description": "INput logger.", "icon": "type", "base_classes": ["Message"], "display_name": "Input logger", "documentation": "https://docs.langflow.org/components-io#text-output", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "text", "hidden": null, "display_name": "Output Text", "method": "text_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["input_value"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false, "lf_version": "1.6.3"}, "showNode": true, "type": "TextOutput", "id": "TextOutput-FmVJk"}, "selected": false, "measured": {"width": 320, "height": 164}, "dragging": false}, {"id": "CustomComponent-puwtK", "type": "genericNode", "position": {"x": -3075.041287358522, "y": 592.5568218694075}, "data": {"node": {"template": {"_type": "Component", "base_currency": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "base_currency", "value": "", "display_name": "Base Currency", "advanced": false, "input_types": ["str", "Message"], "dynamic": false, "info": "ISO 4217 code (USD, EUR, etc.)", "title_case": false, "type": "str", "_input_type": "StrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import Any\r\nfrom langflow.custom.custom_component.component import Component\r\nfrom langflow.io import StrInput, Output  # \u0412\u0410\u0416\u041d\u041e: \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 StrInput\r\nfrom langflow.schema.data import Data\r\n\r\nclass GetLatestRateOLD(Component):\r\n    display_name = \"Get Latest Rate OLD\"\r\n    description = \"Get exchange rate between currencies\"\r\n    icon = \"dollar-sign\"\r\n    name = \"GetLatestRate\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"base_currency\",\r\n            display_name=\"Base Currency\",\r\n            info=\"ISO 4217 code (USD, EUR, etc.)\",\r\n            required=True,\r\n            input_types=[\"str\", \"Message\"]\r\n        ),\r\n        StrInput(\r\n            name=\"target_currency\",\r\n            display_name=\"Target Currency\",\r\n            info=\"ISO 4217 code (RUB, EUR, etc.)\",\r\n            required=True,\r\n            input_types=[\"str\", \"Message\"]\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"params\", display_name=\"Parameters\", method=\"build_params\")\r\n    ]\r\n    \r\n    def _get_text(self, v: Any) -> str:\r\n        try:\r\n            if isinstance(v, Message):\r\n                return v.text or \"\"\r\n        except Exception:\r\n            pass\r\n        if isinstance(v, dict) and \"TEXT\" in v:\r\n            return str(v.get(\"TEXT\") or \"\")\r\n        return str(v or \"\")\r\n\r\n    def build_params(self) -> Data:\r\n        return Data(data={\r\n            \"base\": self._get_text(self.base_currency),\r\n            \"target\": self._get_text(self.target_currency)\r\n        })\r\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "target_currency": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "target_currency", "value": "", "display_name": "Target Currency", "advanced": false, "input_types": ["str", "Message"], "dynamic": false, "info": "ISO 4217 code (RUB, EUR, etc.)", "title_case": false, "type": "str", "_input_type": "StrInput"}}, "description": "Get exchange rate between currencies", "icon": "dollar-sign", "base_classes": ["Data"], "display_name": "Get Latest Rate OLD", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "params", "hidden": null, "display_name": "Parameters", "method": "build_params", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["base_currency", "target_currency"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false}, "showNode": true, "type": "GetLatestRate", "id": "CustomComponent-puwtK"}, "selected": false, "measured": {"width": 320, "height": 284}, "dragging": false}, {"id": "ChatInput-vKFsW", "type": "genericNode", "position": {"x": -3669.800867570083, "y": 956.7686263664053}, "data": {"node": {"template": {"_type": "Component", "files": {"trace_as_metadata": true, "file_path": "", "fileTypes": ["csv", "json", "pdf", "txt", "md", "mdx", "yaml", "yml", "xml", "html", "htm", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "temp_file": true, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "files", "value": "", "display_name": "Files", "advanced": true, "dynamic": false, "info": "Files to be sent with the message.", "title_case": false, "type": "file", "_input_type": "FileInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u044b \u0432 \u0446\u0435\u043b\u0435\u0432\u0443\u044e\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        # Ensure files is a list and filter out empty/None values\n        files = self.files if self.files else []\n        if files and not isinstance(files, list):\n            files = [files]\n        files = [f for f in files if f is not None and f != \"\"]\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=files,\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Input Text", "advanced": false, "input_types": [], "dynamic": false, "info": "Message to be passed as input.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "sender": {"tool_mode": false, "trace_as_metadata": true, "options": ["Machine", "User"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "sender", "value": "User", "display_name": "Sender Type", "advanced": true, "dynamic": false, "info": "Type of sender.", "title_case": false, "external_options": {}, "type": "str", "_input_type": "DropdownInput"}, "sender_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sender_name", "value": "User", "display_name": "Sender Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Name of the sender.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "session_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "session_id", "value": "", "display_name": "Session ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "should_store_message": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "should_store_message", "value": true, "display_name": "Store Messages", "advanced": true, "dynamic": false, "info": "Store the message in the history.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u044b \u0432 \u0446\u0435\u043b\u0435\u0432\u0443\u044e", "icon": "MessagesSquare", "base_classes": ["Message"], "display_name": "Chat Input", "documentation": "https://docs.langflow.org/components-io#chat-input", "minimized": true, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "message", "hidden": null, "display_name": "Chat Message", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "files"], "beta": false, "legacy": false, "edited": true, "metadata": {}, "tool_mode": false}, "showNode": false, "type": "ChatInput", "id": "ChatInput-vKFsW"}, "selected": false, "measured": {"width": 192, "height": 47}, "dragging": false}, {"id": "GChatStructured-NweWx", "type": "genericNode", "position": {"x": -3298.822018736862, "y": 1185.3301305469815}, "data": {"id": "GChatStructured-NweWx", "node": {"base_classes": ["Data"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Structured output via Function Calling. If schema isn't valid, answer will be: {'answer': 'str'}", "display_name": "GigaChat Structured Output", "documentation": "http://docs.langflow.org/components/custom", "edited": true, "field_order": ["input_message", "giga_api", "model_name", "scope", "output_schema", "function_name", "function_description", "system_prompt", "temperature"], "frozen": false, "icon": "custom_components", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Structured Output", "group_outputs": false, "hidden": null, "method": "build_output", "name": "output", "options": null, "required_inputs": null, "selected": "Data", "tool_mode": true, "types": ["Data"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from typing import Any, Dict\r\nfrom langflow.custom import Component\r\nfrom langflow.io import MessageTextInput, Output, DropdownInput, StrInput, CodeInput\r\nfrom langflow.schema import Data\r\nimport json, requests, uuid\r\n\r\nJSON_TYPE_MAP = {\r\n    \"str\": \"string\",\r\n    \"string\": \"string\",\r\n    \"int\": \"integer\",\r\n    \"integer\": \"integer\",\r\n    \"float\": \"number\",\r\n    \"number\": \"number\",\r\n    \"bool\": \"boolean\",\r\n    \"boolean\": \"boolean\",\r\n    \"list\": \"array\",\r\n    \"array\": \"array\",\r\n    \"dict\": \"object\",\r\n    \"object\": \"object\",\r\n}\r\n\r\nclass GChatStructured(Component):\r\n    display_name = \"GigaChat Structured Output\"\r\n    description = \"Structured output via Function Calling. If schema isn't valid, answer will be: {'answer': 'str'}\"\r\n    documentation: str = \"http://docs.langflow.org/components/custom\"\r\n    icon = \"custom_components\"\r\n\r\n    model_list = [\"GigaChat-2\", \"GigaChat-2-Pro\", \"GigaChat-2-Max\"]\r\n    scope_list = [\"GIGACHAT_API_PERS\", \"GIGACHAT_API_CORP\", \"GIGACHAT_API_B2B\"]\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"input_message\", display_name=\"Input Message\"),\r\n        StrInput(name=\"giga_api\", display_name=\"GigaChat API Key (Base64 credentials)\", input_types=[\"str\",\"Message\"]),\r\n        DropdownInput(name=\"model_name\", display_name=\"Model\", options=model_list, value=\"GigaChat-2\"),\r\n        DropdownInput(name=\"scope\", display_name=\"Scope\", options=scope_list, value=\"GIGACHAT_API_PERS\"),\r\n        CodeInput(\r\n            name=\"output_schema\",\r\n            display_name=\"Output Schema (JSON or simplified)\",\r\n            info='Either full JSON Schema properties map, or simplified types like {\"answer\":\"str\",\"confidence\":\"float\",\"skills\":\"array\"}',\r\n            value='{\"answer\":\"str\",\"confidence\":\"float\",\"skills\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}'\r\n        ),\r\n        MessageTextInput(name=\"function_name\", display_name=\"Function Name\", value=\"extract_data\"),\r\n        MessageTextInput(name=\"function_description\", display_name=\"Function Description\", value=\"Extract structured data from the input\"),\r\n        MultilineInput(name=\"system_prompt\", display_name=\"System Prompt\", value=\"\u0422\u044b \u2014 \u0443\u043c\u043d\u044b\u0439 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442. \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u0435.\"),\r\n        MessageTextInput(name=\"temperature\", display_name=\"Temperature\", value=\"0.1\"),\r\n    ]\r\n\r\n    outputs = [Output(display_name=\"Structured Output\", name=\"output\", method=\"build_output\", type=\"Data\")]\r\n\r\n    def _get_text(self, v: Any) -> str:\r\n        try:\r\n            if hasattr(v, \"text\"):\r\n                return v.text or \"\"\r\n        except Exception:\r\n            pass\r\n        if isinstance(v, dict) and \"text\" in v:\r\n            return str(v.get(\"text\") or \"\")\r\n        return str(v or \"\")\r\n\r\n    def _get_access_token(self, credentials: str, scope: str) -> str:\r\n        url = \"https://ngw.devices.sberbank.ru:9443/api/v2/oauth\"\r\n        headers = {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            \"Accept\": \"application/json\",\r\n            \"RqUID\": str(uuid.uuid4()),\r\n            \"Authorization\": f\"Basic {credentials}\",\r\n        }\r\n        resp = requests.post(url, headers=headers, data={\"scope\": scope}, timeout=30, verify=False)\r\n        resp.raise_for_status()\r\n        return resp.json()[\"access_token\"]\r\n\r\n    def _normalize_properties(self, schema_like: Dict) -> Dict:\r\n        props = {}\r\n        required = []\r\n        for name, spec in schema_like.items():\r\n            if isinstance(spec, dict) and \"type\" in spec:\r\n                t = JSON_TYPE_MAP.get(str(spec[\"type\"]).lower()) or \"string\"\r\n                out = dict(spec)\r\n                out[\"type\"] = t\r\n                if t == \"array\" and \"items\" not in out:\r\n                    out[\"items\"] = {\"type\": \"string\"}\r\n                props[name] = out\r\n            else:\r\n                t = JSON_TYPE_MAP.get(str(spec).lower(), \"string\")\r\n                props[name] = {\"type\": t}\r\n                if t == \"array\":\r\n                    props[name][\"items\"] = {\"type\": \"string\"}\r\n            # \u0434\u0435\u043b\u0430\u0435\u043c \u043a\u043b\u044e\u0447 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\r\n            required.append(name)\r\n        return {\"type\": \"object\", \"properties\": props, \"required\": required}\r\n\r\n\r\n    def _build_function(self, name: str, description: str, schema_input: Any) -> Dict:\r\n        if isinstance(schema_input, str):\r\n            try:\r\n                schema_like = json.loads(schema_input)\r\n            except json.JSONDecodeError:\r\n                # \u0442\u0440\u0430\u043a\u0442\u0443\u0435\u043c \u043a\u0430\u043a \u043e\u0434\u0438\u043d \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043e\u0442\u0432\u0435\u0442\r\n                schema_like = {\"answer\": \"str\"}\r\n        elif isinstance(schema_input, dict):\r\n            schema_like = schema_input\r\n        else:\r\n            schema_like = {\"answer\": \"str\"}\r\n        parameters = self._normalize_properties(schema_like)\r\n        return {\"name\": name, \"description\": description, \"parameters\": parameters}\r\n\r\n    def _validate_function(self, access_token: str, function_obj: Dict) -> Dict:\r\n        url = \"https://gigachat.devices.sberbank.ru/api/v1/functions/validate\"\r\n        headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {access_token}\", \"Accept\": \"application/json\"}\r\n        resp = requests.post(url, headers=headers, json=function_obj, timeout=30, verify=False)\r\n        # \u043d\u0435 \u043f\u0430\u0434\u0430\u0435\u043c \u043f\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0443 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\r\n        try:\r\n            data = resp.json()\r\n        except Exception:\r\n            data = {\"status_code\": resp.status_code, \"text\": resp.text[:500]}\r\n        return data\r\n\r\n    def build_output(self) -> Data:\r\n        temperature = float(self.temperature)\r\n        access_token = self._get_access_token(self._get_text(self.giga_api), self.scope)\r\n\r\n        fn = self._build_function(self.function_name, self.function_description, self.output_schema)\r\n        validation = self._validate_function(access_token, fn)  # \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438\r\n        # \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c warnings \u0438 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e\r\n\r\n        url = \"https://gigachat.devices.sberbank.ru/api/v1/chat/completions\"\r\n        headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {access_token}\", \"Accept\": \"application/json\"}\r\n        payload = {\r\n            \"model\": self.model_name,\r\n            \"messages\": [\r\n                {\"role\": \"system\", \"content\": self.system_prompt},\r\n                {\"role\": \"user\", \"content\": self.input_message},\r\n            ],\r\n            \"temperature\": temperature,\r\n            \"function_call\": {\"name\": self.function_name},\r\n            \"functions\": [fn],\r\n            # \"stream\": False,  # \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438\r\n        }\r\n\r\n        try:\r\n            resp = requests.post(url, headers=headers, json=payload, timeout=60, verify=False)\r\n            # \u0432\u043c\u0435\u0441\u0442\u043e raise_for_status \u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0435\u043b\u043e \u043e\u0448\u0438\u0431\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043f\u0440\u0438\u0447\u0438\u043d\u0443 422\r\n            try:\r\n                body = resp.json()\r\n            except Exception:\r\n                body = {\"status_code\": resp.status_code, \"text\": resp.text[:1000]}\r\n\r\n            if resp.status_code != 200:\r\n                return Data(data={\"error\": body, \"validation\": validation}, text=json.dumps({\"error\": body, \"validation\": validation}, ensure_ascii=False, indent=2))\r\n\r\n            choice0 = (body.get(\"choices\") or [{}])[0]\r\n            msg = choice0.get(\"message\", {})\r\n            fn_call = msg.get(\"function_call\", {})\r\n            args = fn_call.get(\"arguments\", {})\r\n            return Data(data=args)\r\n\r\n        except Exception as e:\r\n            return Data(data={\"error\": str(e)}, text=f\"Error: {str(e)}\")\r\n"}, "function_description": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Function Description", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "function_description", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0445\u0435\u043c\u0430"}, "function_name": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Function Name", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "function_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "is_allowed"}, "giga_api": {"_input_type": "StrInput", "advanced": false, "display_name": "GigaChat API Key (Base64 credentials)", "dynamic": false, "info": "", "input_types": ["str", "Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "giga_api", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": ""}, "input_message": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Input Message", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "input_message", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": ""}, "model_name": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Model", "dynamic": false, "external_options": {}, "info": "", "name": "model_name", "options": ["GigaChat-2", "GigaChat-2-Pro", "GigaChat-2-Max"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "GigaChat-2"}, "output_schema": {"_input_type": "CodeInput", "advanced": false, "display_name": "Output Schema (JSON or simplified)", "dynamic": false, "info": "Either full JSON Schema properties map, or simplified types like {\"answer\":\"str\",\"confidence\":\"float\",\"skills\":\"array\"}", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "output_schema", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "type": "code", "value": "{'base': \"str\", \"target\": \"str\"}"}, "scope": {"_input_type": "DropdownInput", "advanced": false, "combobox": false, "dialog_inputs": {}, "display_name": "Scope", "dynamic": false, "external_options": {}, "info": "", "name": "scope", "options": ["GIGACHAT_API_PERS", "GIGACHAT_API_CORP", "GIGACHAT_API_B2B"], "options_metadata": [], "placeholder": "", "required": false, "show": true, "title_case": false, "toggle": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "GIGACHAT_API_PERS"}, "system_prompt": {"_input_type": "MultilineInput", "advanced": false, "copy_field": false, "display_name": "System Prompt", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "multiline": true, "name": "system_prompt", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "\u0418\u0437\u0432\u043b\u0435\u043a\u0438 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 base_currency \u0418 target_currency"}, "temperature": {"_input_type": "MessageTextInput", "advanced": false, "display_name": "Temperature", "dynamic": false, "info": "", "input_types": ["Message"], "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "temperature", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "type": "str", "value": "0.1"}}, "tool_mode": false}, "showNode": true, "type": "GChatStructured"}, "selected": false, "measured": {"width": 320, "height": 878}, "dragging": false}, {"id": "GetEnvVar-jrdpG", "type": "genericNode", "position": {"x": -3911.558086189345, "y": 1403.2380456950632}, "data": {"id": "GetEnvVar-jrdpG", "node": {"base_classes": ["Message"], "beta": false, "category": "datastax", "conditional_paths": [], "custom_fields": {}, "description": "Gets the value of an environment variable from the system.", "display_name": "Get Environment Variable", "documentation": "", "edited": false, "field_order": ["env_var_name"], "frozen": false, "icon": "AstraDB", "key": "GetEnvVar", "legacy": false, "lf_version": "1.6.3", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Environment Variable Value", "group_outputs": false, "method": "process_inputs", "name": "env_var_value", "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "score": 0.15609486447437038, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "import os\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import StrInput\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass GetEnvVar(Component):\n    display_name = \"Get Environment Variable\"\n    description = \"Gets the value of an environment variable from the system.\"\n    icon = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"env_var_name\",\n            display_name=\"Environment Variable Name\",\n            info=\"Name of the environment variable to get\",\n        )\n    ]\n\n    outputs = [\n        Output(display_name=\"Environment Variable Value\", name=\"env_var_value\", method=\"process_inputs\"),\n    ]\n\n    def process_inputs(self) -> Message:\n        if self.env_var_name not in os.environ:\n            msg = f\"Environment variable {self.env_var_name} not set\"\n            raise ValueError(msg)\n        return Message(text=os.environ[self.env_var_name])\n"}, "env_var_name": {"_input_type": "StrInput", "advanced": false, "display_name": "Environment Variable Name", "dynamic": false, "info": "Name of the environment variable to get", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "env_var_name", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": false, "trace_as_metadata": true, "type": "str", "value": "GIGA_API_KEY"}}, "tool_mode": false}, "showNode": true, "type": "GetEnvVar"}, "selected": false, "measured": {"width": 320, "height": 218}, "dragging": false}, {"id": "note-huyLq", "type": "noteNode", "position": {"x": -3703.763996895522, "y": 1702.416971694368}, "data": {"node": {"description": "\u0438\u0437-\u0437\u0430 \u043e\u0448\u0438\u0431\u043e\u043a langflow \u043d\u0430 \u044d\u0442\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435: \u043e\u043d \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0437 MCP \u043d\u0438\u043a\u0430\u043a\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043a\u0440\u043e\u043c\u0435 Input_value, \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0440\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e", "display_name": "", "documentation": "", "template": {}}, "type": "note", "id": "note-huyLq"}, "measured": {"width": 324, "height": 324}, "selected": false, "dragging": false, "width": 324, "height": 324, "resizing": false}], "edges": [{"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "GetEnvVar", "id": "GetEnvVar-Zswa9", "name": "env_var_value", "output_types": ["Message"]}, "targetHandle": {"fieldName": "EXCHANGERATE_API_KEY", "id": "Prompt Template-NguBh", "inputTypes": ["Message"], "type": "str"}}, "id": "reactflow__edge-GetEnvVar-Zswa9{\u0153dataType\u0153:\u0153GetEnvVar\u0153,\u0153id\u0153:\u0153GetEnvVar-Zswa9\u0153,\u0153name\u0153:\u0153env_var_value\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt Template-NguBh{\u0153fieldName\u0153:\u0153EXCHANGERATE_API_KEY\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "GetEnvVar-Zswa9", "sourceHandle": "{\u0153dataType\u0153:\u0153GetEnvVar\u0153,\u0153id\u0153:\u0153GetEnvVar-Zswa9\u0153,\u0153name\u0153:\u0153env_var_value\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt Template-NguBh", "targetHandle": "{\u0153fieldName\u0153:\u0153EXCHANGERATE_API_KEY\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "Prompt Template", "id": "Prompt Template-NguBh", "name": "prompt", "output_types": ["Message"]}, "targetHandle": {"fieldName": "url_input", "id": "APIRequest-Dhufy", "inputTypes": ["Message"], "type": "str"}}, "id": "reactflow__edge-Prompt Template-NguBh{\u0153dataType\u0153:\u0153Prompt Template\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-APIRequest-Dhufy{\u0153fieldName\u0153:\u0153url_input\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "Prompt Template-NguBh", "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt Template\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "APIRequest-Dhufy", "targetHandle": "{\u0153fieldName\u0153:\u0153url_input\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "APIRequest", "id": "APIRequest-Dhufy", "name": "data", "output_types": ["Data"]}, "targetHandle": {"fieldName": "input_data", "id": "ParserComponent-xj4Nj", "inputTypes": ["DataFrame", "Data"], "type": "other"}}, "id": "reactflow__edge-APIRequest-Dhufy{\u0153dataType\u0153:\u0153APIRequest\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent-xj4Nj{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "APIRequest-Dhufy", "sourceHandle": "{\u0153dataType\u0153:\u0153APIRequest\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent-xj4Nj", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-xj4Nj", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "error_code", "id": "CustomComponent-GcJgG", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-xj4Nj{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-GcJgG{\u0153fieldName\u0153:\u0153error_code\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-xj4Nj", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-GcJgG", "targetHandle": "{\u0153fieldName\u0153:\u0153error_code\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "Prompt Template", "id": "Prompt Template-7eaY5", "name": "prompt", "output_types": ["Message"]}, "targetHandle": {"fieldName": "error_message", "id": "CustomComponent-GcJgG", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__Prompt Template-7eaY5{\u0153dataType\u0153:\u0153Prompt Template\u0153,\u0153id\u0153:\u0153Prompt Template-7eaY5\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-GcJgG{\u0153fieldName\u0153:\u0153error_message\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "Prompt Template-7eaY5", "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt Template\u0153,\u0153id\u0153:\u0153Prompt Template-7eaY5\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-GcJgG", "targetHandle": "{\u0153fieldName\u0153:\u0153error_message\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "APIRequest", "id": "APIRequest-Dhufy", "name": "data", "output_types": ["Data"]}, "targetHandle": {"fieldName": "json_data", "id": "CustomComponent-dBDOD", "inputTypes": ["Data"], "type": "other"}}, "id": "xy-edge__APIRequest-Dhufy{\u0153dataType\u0153:\u0153APIRequest\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-CustomComponent-dBDOD{\u0153fieldName\u0153:\u0153json_data\u0153,\u0153id\u0153:\u0153CustomComponent-dBDOD\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "APIRequest-Dhufy", "sourceHandle": "{\u0153dataType\u0153:\u0153APIRequest\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "CustomComponent-dBDOD", "targetHandle": "{\u0153fieldName\u0153:\u0153json_data\u0153,\u0153id\u0153:\u0153CustomComponent-dBDOD\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ExtractErrorType", "id": "CustomComponent-dBDOD", "name": "error_type", "output_types": ["Message"]}, "targetHandle": {"fieldName": "error-type", "id": "Prompt Template-7eaY5", "inputTypes": ["Message"], "type": "str"}}, "id": "xy-edge__CustomComponent-dBDOD{\u0153dataType\u0153:\u0153ExtractErrorType\u0153,\u0153id\u0153:\u0153CustomComponent-dBDOD\u0153,\u0153name\u0153:\u0153error_type\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt Template-7eaY5{\u0153fieldName\u0153:\u0153error-type\u0153,\u0153id\u0153:\u0153Prompt Template-7eaY5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "CustomComponent-dBDOD", "sourceHandle": "{\u0153dataType\u0153:\u0153ExtractErrorType\u0153,\u0153id\u0153:\u0153CustomComponent-dBDOD\u0153,\u0153name\u0153:\u0153error_type\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt Template-7eaY5", "targetHandle": "{\u0153fieldName\u0153:\u0153error-type\u0153,\u0153id\u0153:\u0153Prompt Template-7eaY5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-d1wvy", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "target_currency", "id": "CustomComponent-UTHj3", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-d1wvy{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-d1wvy\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-UTHj3{\u0153fieldName\u0153:\u0153target_currency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-d1wvy", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-d1wvy\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-UTHj3", "targetHandle": "{\u0153fieldName\u0153:\u0153target_currency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-lVb4k", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "base_currency", "id": "CustomComponent-UTHj3", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-lVb4k{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-UTHj3{\u0153fieldName\u0153:\u0153base_currency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-lVb4k", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-UTHj3", "targetHandle": "{\u0153fieldName\u0153:\u0153base_currency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "CheckCurrency", "id": "CustomComponent-UTHj3", "name": "output", "output_types": ["Data"]}, "targetHandle": {"fieldName": "input_data", "id": "ParserComponent-mvU7y", "inputTypes": ["DataFrame", "Data"], "type": "other"}}, "id": "xy-edge__CustomComponent-UTHj3{\u0153dataType\u0153:\u0153CheckCurrency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent-mvU7y{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-mvU7y\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "CustomComponent-UTHj3", "sourceHandle": "{\u0153dataType\u0153:\u0153CheckCurrency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent-mvU7y", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-mvU7y\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-mvU7y", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_text", "id": "ConditionalRouter-eSYVE", "inputTypes": ["Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-mvU7y{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-mvU7y\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ConditionalRouter-eSYVE{\u0153fieldName\u0153:\u0153input_text\u0153,\u0153id\u0153:\u0153ConditionalRouter-eSYVE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-mvU7y", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-mvU7y\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ConditionalRouter-eSYVE", "targetHandle": "{\u0153fieldName\u0153:\u0153input_text\u0153,\u0153id\u0153:\u0153ConditionalRouter-eSYVE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ExtractErrorType", "id": "CustomComponent-dBDOD", "name": "error_type", "output_types": ["Message"]}, "targetHandle": {"fieldName": "error_type", "id": "CustomComponent-GcJgG", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__CustomComponent-dBDOD{\u0153dataType\u0153:\u0153ExtractErrorType\u0153,\u0153id\u0153:\u0153CustomComponent-dBDOD\u0153,\u0153name\u0153:\u0153error_type\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-GcJgG{\u0153fieldName\u0153:\u0153error_type\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "CustomComponent-dBDOD", "sourceHandle": "{\u0153dataType\u0153:\u0153ExtractErrorType\u0153,\u0153id\u0153:\u0153CustomComponent-dBDOD\u0153,\u0153name\u0153:\u0153error_type\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-GcJgG", "targetHandle": "{\u0153fieldName\u0153:\u0153error_type\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ConditionalRouter", "id": "ConditionalRouter-eSYVE", "name": "true_result", "output_types": ["Message"]}, "targetHandle": {"fieldName": "if_else_input", "id": "Prompt Template-NguBh", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ConditionalRouter-eSYVE{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-eSYVE\u0153,\u0153name\u0153:\u0153true_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt Template-NguBh{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ConditionalRouter-eSYVE", "sourceHandle": "{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-eSYVE\u0153,\u0153name\u0153:\u0153true_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt Template-NguBh", "targetHandle": "{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-lVb4k", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "base", "id": "Prompt Template-NguBh", "inputTypes": ["Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-lVb4k{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt Template-NguBh{\u0153fieldName\u0153:\u0153base\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-lVb4k", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Prompt Template-NguBh", "targetHandle": "{\u0153fieldName\u0153:\u0153base\u0153,\u0153id\u0153:\u0153Prompt Template-NguBh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-xj4Nj", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "status_code", "id": "ErrorJSONFormatter-50k41", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-xj4Nj{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ErrorJSONFormatter-50k41{\u0153fieldName\u0153:\u0153status_code\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-xj4Nj", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ErrorJSONFormatter-50k41", "targetHandle": "{\u0153fieldName\u0153:\u0153status_code\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "APIRequest", "id": "APIRequest-Dhufy", "name": "data", "output_types": ["Data"]}, "targetHandle": {"fieldName": "json_data", "id": "CustomComponent-gBl2c", "inputTypes": ["Data"], "type": "other"}}, "id": "xy-edge__APIRequest-Dhufy{\u0153dataType\u0153:\u0153APIRequest\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-CustomComponent-gBl2c{\u0153fieldName\u0153:\u0153json_data\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "APIRequest-Dhufy", "sourceHandle": "{\u0153dataType\u0153:\u0153APIRequest\u0153,\u0153id\u0153:\u0153APIRequest-Dhufy\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "CustomComponent-gBl2c", "targetHandle": "{\u0153fieldName\u0153:\u0153json_data\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-d1wvy", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "target_currency", "id": "CustomComponent-gBl2c", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-d1wvy{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-d1wvy\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-gBl2c{\u0153fieldName\u0153:\u0153target_currency\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-d1wvy", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-d1wvy\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-gBl2c", "targetHandle": "{\u0153fieldName\u0153:\u0153target_currency\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ExtractConversion", "id": "CustomComponent-gBl2c", "name": "conversion_rate", "output_types": ["Message"]}, "targetHandle": {"fieldName": "message", "id": "ErrorJSONFormatter-50k41", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__CustomComponent-gBl2c{\u0153dataType\u0153:\u0153ExtractConversion\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153name\u0153:\u0153conversion_rate\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ErrorJSONFormatter-50k41{\u0153fieldName\u0153:\u0153message\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "CustomComponent-gBl2c", "sourceHandle": "{\u0153dataType\u0153:\u0153ExtractConversion\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153name\u0153:\u0153conversion_rate\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ErrorJSONFormatter-50k41", "targetHandle": "{\u0153fieldName\u0153:\u0153message\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-xj4Nj", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_text", "id": "ConditionalRouter-BM9eG", "inputTypes": ["Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-xj4Nj{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ConditionalRouter-BM9eG{\u0153fieldName\u0153:\u0153input_text\u0153,\u0153id\u0153:\u0153ConditionalRouter-BM9eG\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-xj4Nj", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-xj4Nj\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ConditionalRouter-BM9eG", "targetHandle": "{\u0153fieldName\u0153:\u0153input_text\u0153,\u0153id\u0153:\u0153ConditionalRouter-BM9eG\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ConditionalRouter", "id": "ConditionalRouter-BM9eG", "name": "true_result", "output_types": ["Message"]}, "targetHandle": {"fieldName": "if_else_input", "id": "ErrorJSONFormatter-50k41", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ConditionalRouter-BM9eG{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-BM9eG\u0153,\u0153name\u0153:\u0153true_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ErrorJSONFormatter-50k41{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ConditionalRouter-BM9eG", "sourceHandle": "{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-BM9eG\u0153,\u0153name\u0153:\u0153true_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ErrorJSONFormatter-50k41", "targetHandle": "{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "LoadJSON", "id": "CustomComponent-0wmoh", "name": "output", "output_types": ["Data"]}, "targetHandle": {"fieldName": "currency_dict", "id": "CustomComponent-UTHj3", "inputTypes": ["Data"], "type": "other"}}, "id": "xy-edge__CustomComponent-0wmoh{\u0153dataType\u0153:\u0153LoadJSON\u0153,\u0153id\u0153:\u0153CustomComponent-0wmoh\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-CustomComponent-UTHj3{\u0153fieldName\u0153:\u0153currency_dict\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "CustomComponent-0wmoh", "sourceHandle": "{\u0153dataType\u0153:\u0153LoadJSON\u0153,\u0153id\u0153:\u0153CustomComponent-0wmoh\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "CustomComponent-UTHj3", "targetHandle": "{\u0153fieldName\u0153:\u0153currency_dict\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ErrorMessageOnly", "id": "CustomComponent-GcJgG", "name": "message_output", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_value", "id": "ChatOutput-qmcgh", "inputTypes": ["Data", "DataFrame", "Message"], "type": "other"}}, "id": "xy-edge__CustomComponent-GcJgG{\u0153dataType\u0153:\u0153ErrorMessageOnly\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153name\u0153:\u0153message_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-qmcgh{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-qmcgh\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "CustomComponent-GcJgG", "sourceHandle": "{\u0153dataType\u0153:\u0153ErrorMessageOnly\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153name\u0153:\u0153message_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ChatOutput-qmcgh", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-qmcgh\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "JSONFormatterMessageOnly", "id": "ErrorJSONFormatter-50k41", "name": "message_output", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_value", "id": "ChatOutput-mnS3w", "inputTypes": ["Data", "DataFrame", "Message"], "type": "other"}}, "id": "xy-edge__ErrorJSONFormatter-50k41{\u0153dataType\u0153:\u0153JSONFormatterMessageOnly\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153name\u0153:\u0153message_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-mnS3w{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-mnS3w\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "ErrorJSONFormatter-50k41", "sourceHandle": "{\u0153dataType\u0153:\u0153JSONFormatterMessageOnly\u0153,\u0153id\u0153:\u0153ErrorJSONFormatter-50k41\u0153,\u0153name\u0153:\u0153message_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ChatOutput-mnS3w", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-mnS3w\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-egp4X", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_value", "id": "ChatOutput-sFprI", "inputTypes": ["Data", "DataFrame", "Message"], "type": "other"}}, "id": "xy-edge__ParserComponent-egp4X{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-egp4X\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-sFprI{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-sFprI\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "ParserComponent-egp4X", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-egp4X\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ChatOutput-sFprI", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-sFprI\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ConditionalRouter", "id": "ConditionalRouter-eSYVE", "name": "false_result", "output_types": ["Message"]}, "targetHandle": {"fieldName": "if_else_input", "id": "ParserComponent-egp4X", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ConditionalRouter-eSYVE{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-eSYVE\u0153,\u0153name\u0153:\u0153false_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ParserComponent-egp4X{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153ParserComponent-egp4X\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ConditionalRouter-eSYVE", "sourceHandle": "{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-eSYVE\u0153,\u0153name\u0153:\u0153false_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ParserComponent-egp4X", "targetHandle": "{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153ParserComponent-egp4X\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "CheckCurrency", "id": "CustomComponent-UTHj3", "name": "output", "output_types": ["Data"]}, "targetHandle": {"fieldName": "input_data", "id": "ParserComponent-egp4X", "inputTypes": ["DataFrame", "Data"], "type": "other"}}, "id": "xy-edge__CustomComponent-UTHj3{\u0153dataType\u0153:\u0153CheckCurrency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent-egp4X{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-egp4X\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "CustomComponent-UTHj3", "sourceHandle": "{\u0153dataType\u0153:\u0153CheckCurrency\u0153,\u0153id\u0153:\u0153CustomComponent-UTHj3\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent-egp4X", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-egp4X\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ParserComponent", "id": "ParserComponent-lVb4k", "name": "parsed_text", "output_types": ["Message"]}, "targetHandle": {"fieldName": "base_currency", "id": "CustomComponent-gBl2c", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ParserComponent-lVb4k{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-gBl2c{\u0153fieldName\u0153:\u0153base_currency\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ParserComponent-lVb4k", "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-gBl2c", "targetHandle": "{\u0153fieldName\u0153:\u0153base_currency\u0153,\u0153id\u0153:\u0153CustomComponent-gBl2c\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ConditionalRouter", "id": "ConditionalRouter-BM9eG", "name": "false_result", "output_types": ["Message"]}, "targetHandle": {"fieldName": "if_else_input", "id": "CustomComponent-GcJgG", "inputTypes": ["str", "Message"], "type": "str"}}, "id": "xy-edge__ConditionalRouter-BM9eG{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-BM9eG\u0153,\u0153name\u0153:\u0153false_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-CustomComponent-GcJgG{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ConditionalRouter-BM9eG", "sourceHandle": "{\u0153dataType\u0153:\u0153ConditionalRouter\u0153,\u0153id\u0153:\u0153ConditionalRouter-BM9eG\u0153,\u0153name\u0153:\u0153false_result\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "CustomComponent-GcJgG", "targetHandle": "{\u0153fieldName\u0153:\u0153if_else_input\u0153,\u0153id\u0153:\u0153CustomComponent-GcJgG\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"source": "GetEnvVar-jrdpG", "sourceHandle": "{\u0153dataType\u0153:\u0153GetEnvVar\u0153,\u0153id\u0153:\u0153GetEnvVar-jrdpG\u0153,\u0153name\u0153:\u0153env_var_value\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "GChatStructured-NweWx", "targetHandle": "{\u0153fieldName\u0153:\u0153giga_api\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "giga_api", "id": "GChatStructured-NweWx", "inputTypes": ["str", "Message"], "type": "str"}, "sourceHandle": {"dataType": "GetEnvVar", "id": "GetEnvVar-jrdpG", "name": "env_var_value", "output_types": ["Message"]}}, "id": "xy-edge__GetEnvVar-jrdpG{\u0153dataType\u0153:\u0153GetEnvVar\u0153,\u0153id\u0153:\u0153GetEnvVar-jrdpG\u0153,\u0153name\u0153:\u0153env_var_value\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-GChatStructured-NweWx{\u0153fieldName\u0153:\u0153giga_api\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153inputTypes\u0153:[\u0153str\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "ChatInput-vKFsW", "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-vKFsW\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "GChatStructured-NweWx", "targetHandle": "{\u0153fieldName\u0153:\u0153input_message\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "input_message", "id": "GChatStructured-NweWx", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "ChatInput", "id": "ChatInput-vKFsW", "name": "message", "output_types": ["Message"]}}, "id": "xy-edge__ChatInput-vKFsW{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-vKFsW\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-GChatStructured-NweWx{\u0153fieldName\u0153:\u0153input_message\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "GChatStructured-NweWx", "sourceHandle": "{\u0153dataType\u0153:\u0153GChatStructured\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent-d1wvy", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-d1wvy\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "ParserComponent-d1wvy", "inputTypes": ["DataFrame", "Data"], "type": "other"}, "sourceHandle": {"dataType": "GChatStructured", "id": "GChatStructured-NweWx", "name": "output", "output_types": ["Data"]}}, "id": "xy-edge__GChatStructured-NweWx{\u0153dataType\u0153:\u0153GChatStructured\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent-d1wvy{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-d1wvy\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "GChatStructured-NweWx", "sourceHandle": "{\u0153dataType\u0153:\u0153GChatStructured\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "ParserComponent-lVb4k", "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_data", "id": "ParserComponent-lVb4k", "inputTypes": ["DataFrame", "Data"], "type": "other"}, "sourceHandle": {"dataType": "GChatStructured", "id": "GChatStructured-NweWx", "name": "output", "output_types": ["Data"]}}, "id": "xy-edge__GChatStructured-NweWx{\u0153dataType\u0153:\u0153GChatStructured\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParserComponent-lVb4k{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-lVb4k\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "GChatStructured-NweWx", "sourceHandle": "{\u0153dataType\u0153:\u0153GChatStructured\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "TextOutput-FmVJk", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153TextOutput-FmVJk\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "TextOutput-FmVJk", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "GChatStructured", "id": "GChatStructured-NweWx", "name": "output", "output_types": ["Data"]}}, "id": "xy-edge__GChatStructured-NweWx{\u0153dataType\u0153:\u0153GChatStructured\u0153,\u0153id\u0153:\u0153GChatStructured-NweWx\u0153,\u0153name\u0153:\u0153output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-TextOutput-FmVJk{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153TextOutput-FmVJk\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "className": "", "selected": false, "animated": false}], "viewport": {"x": 871.1418915311556, "y": 170.3031598530502, "zoom": 0.25}}, "is_component": false, "updated_at": "2025-10-10T22:58:23+00:00", "webhook": false, "endpoint_name": "get-actual-currency", "tags": [], "locked": false, "mcp_enabled": true, "action_name": "get_latest_rate", "action_description": "", "access_type": "PRIVATE", "id": "a3b14e55-2b60-4c65-9384-026183ce1929", "user_id": "69cd4506-ab8f-481e-ac27-e150c55311bf", "folder_id": "3ebb98ec-78dc-4a7b-ac61-f29e49862381"}